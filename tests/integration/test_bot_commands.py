import pytest
from telegram import InlineKeyboardMarkup
from unittest.mock import patch

#–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@pytest.mark.asyncio
async def test_start_command(mock_update, mock_context):
    from src.handlers.start_handler import start

    await start(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
    mock_update.message.reply_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    called_args = mock_update.message.reply_text.call_args[0]
    assert called_args[0] == "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = mock_update.message.reply_text.call_args[1]['reply_markup'].inline_keyboard
    assert len(keyboard) == 2
    assert keyboard[0][0].text == "üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    assert keyboard[0][0].callback_data == "create_event"
    assert keyboard[1][0].text == "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —è —É—á–∞—Å—Ç–≤—É—é"
    assert keyboard[1][0].callback_data == "my_events"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ user_data
    assert mock_context.user_data["chat_id"] == 12345
    assert "bot_message_id" in mock_context.user_data

#–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
@pytest.mark.asyncio
async def test_start_command_no_message(mock_update, mock_context):
    from src.handlers.start_handler import start

    # –£–±–∏—Ä–∞–µ–º message –∏–∑ update
    mock_update.message = None

    with pytest.raises(AttributeError):
        await start(mock_update, mock_context)
