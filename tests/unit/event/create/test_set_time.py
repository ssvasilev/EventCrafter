import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler
from telegram.error import BadRequest


@pytest.mark.asyncio
async def test_set_time_success(mock_update, mock_context):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    with patch('src.handlers.conversation_handler_states.SET_LIMIT', new='SET_LIMIT'):
        from temp.set_time import set_time

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_time = "14:30"
        test_description = "–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        test_date = "15.12.2023"

        # –ú–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = test_time
        mock_update.message.chat_id = 12345
        mock_update.message.delete = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}
        mock_context.bot = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        with patch('src.event.create.set_time.update_draft') as mock_update_draft, \
                patch('src.event.create.set_time.get_draft') as mock_get_draft:
            mock_get_draft.return_value = {
                "description": test_description,
                "date": test_date,
                "time": test_time
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await set_time(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            mock_update_draft.assert_called_once_with(
                db_path="test_db_path",
                draft_id=1,
                status="AWAIT_PARTICIPANT_LIMIT",
                time=test_time
            )

            mock_get_draft.assert_called_once_with("test_db_path", 1)

            mock_context.bot.edit_message_text.assert_called_once_with(
                chat_id=12345,
                message_id=54321,
                text=f"üì¢ {test_description}\n\nüìÖ –î–∞—Ç–∞: {test_date}\n\nüïí –í—Ä–µ–º—è: {test_time}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ):",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]])
            )

            mock_update.message.delete.assert_called_once()
            assert result == "SET_LIMIT"


@pytest.mark.asyncio
async def test_set_time_invalid_format(mock_update, mock_context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    with patch('src.handlers.conversation_handler_states.SET_TIME', new=2):
        from temp.set_time import set_time

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = "14-30"  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        mock_update.message.chat_id = 12345
        mock_update.message.delete = AsyncMock()

        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}
        mock_context.bot = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = await set_time(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_context.bot.edit_message_text.assert_called_once_with(
            chat_id=12345,
            message_id=54321,
            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]])
        )

        mock_update.message.delete.assert_called_once()
        assert result == 2


@pytest.mark.asyncio
async def test_set_time_draft_not_found(mock_update, mock_context):
    """–¢–µ—Å—Ç —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    with patch('src.handlers.conversation_handler_states.SET_LIMIT', new='SET_LIMIT'):
        from temp.set_time import set_time

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_time = "14:30"

        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = test_time
        mock_update.message.chat_id = 12345
        mock_update.message.delete = AsyncMock()
        mock_update.message.reply_text = AsyncMock()

        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}
        mock_context.bot = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        with patch('src.event.create.set_time.update_draft'), \
                patch('src.event.create.set_time.get_draft') as mock_get_draft:
            mock_get_draft.return_value = None  # –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await set_time(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            mock_update.message.reply_text.assert_called_once_with(
                "–û—à–∏–±–∫–∞: —á–µ—Ä–Ω–æ–≤–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            assert result == ConversationHandler.END


@pytest.mark.asyncio
async def test_set_time_delete_message_error(mock_update, mock_context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    with patch('src.handlers.conversation_handler_states.SET_LIMIT', new='SET_LIMIT'):
        from temp.set_time import set_time

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_time = "14:30"
        test_description = "–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        test_date = "15.12.2023"

        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = test_time
        mock_update.message.chat_id = 12345
        mock_update.message.delete = AsyncMock(side_effect=BadRequest("Message to delete not found"))

        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}
        mock_context.bot = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        with patch('src.event.create.set_time.update_draft'), \
                patch('src.event.create.set_time.get_draft') as mock_get_draft:
            mock_get_draft.return_value = {
                "description": test_description,
                "date": test_date,
                "time": test_time
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await set_time(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            mock_update.message.delete.assert_called_once()
            mock_context.bot.edit_message_text.assert_called_once()
            assert result == "SET_LIMIT"


@pytest.mark.asyncio
async def test_set_time_keyboard_structure(mock_update, mock_context):
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    with patch('src.handlers.conversation_handler_states.SET_LIMIT', new='SET_LIMIT'):
        from temp.set_time import set_time
        from telegram import InlineKeyboardMarkup

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_time = "14:30"

        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = test_time
        mock_update.message.chat_id = 12345
        mock_update.message.delete = AsyncMock()

        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}
        mock_context.bot = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        with patch('src.event.create.set_time.update_draft'), \
                patch('src.event.create.set_time.get_draft') as mock_get_draft:
            mock_get_draft.return_value = {
                "description": "–¢–µ—Å—Ç",
                "date": "01.01.2023",
                "time": test_time
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await set_time(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            call_args = mock_context.bot.edit_message_text.call_args[1]
            reply_markup = call_args['reply_markup']

            assert isinstance(reply_markup, InlineKeyboardMarkup)
            assert len(reply_markup.inline_keyboard) == 1
            assert len(reply_markup.inline_keyboard[0]) == 1

            button = reply_markup.inline_keyboard[0][0]
            assert button.text == "‚õî –û—Ç–º–µ–Ω–∞"
            assert button.callback_data == "cancel_input"