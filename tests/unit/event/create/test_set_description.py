import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Message
from telegram.error import BadRequest


@pytest.mark.asyncio
async def test_set_description_success(mock_update, mock_context):
    # –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    with patch('src.handlers.conversation_handler_states.SET_DATE', new='SET_DATE'):
        from src.event.create.set_parameter import set_description
        from telegram import InlineKeyboardMarkup

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        mock_update.message.chat_id = 12345
        mock_update.message.message_id = 67890
        mock_update.message.delete = AsyncMock()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ user_data
        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }

        # –ú–æ–∫–∏—Ä—É–µ–º bot_data
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –±–æ—Ç–∞
        mock_context.bot = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é update_draft
        with patch('src.event.create.set_description.update_draft') as mock_update_draft:
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await set_description(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ update_draft
            mock_update_draft.assert_called_once_with(
                db_path="test_db_path",
                draft_id=1,
                status="AWAIT_DATE",
                description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ edit_message_text
            assert mock_context.bot.edit_message_text.call_count == 1
            call_args = mock_context.bot.edit_message_text.call_args[1]

            assert call_args['chat_id'] == 12345
            assert call_args['message_id'] == 54321
            assert call_args['text'] == "üì¢ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            reply_markup = call_args['reply_markup']
            assert isinstance(reply_markup, InlineKeyboardMarkup)
            assert len(reply_markup.inline_keyboard) == 1
            assert len(reply_markup.inline_keyboard[0]) == 1
            button = reply_markup.inline_keyboard[0][0]
            assert button.text == "‚õî –û—Ç–º–µ–Ω–∞"
            assert button.callback_data == "cancel_input"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ delete —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mock_update.message.delete.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            assert result == "SET_DATE"


@pytest.mark.asyncio
async def test_set_description_with_delete_error(mock_update, mock_context):
    # –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    with patch('src.handlers.conversation_handler_states.SET_DATE', new='SET_DATE'):
        from src.event.create.set_parameter import set_description

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        mock_update.message.chat_id = 12345
        mock_update.message.message_id = 67890
        mock_update.message.delete = AsyncMock(side_effect=BadRequest("Message to delete not found"))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ user_data
        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }

        # –ú–æ–∫–∏—Ä—É–µ–º bot_data
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –±–æ—Ç–∞
        mock_context.bot = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é update_draft
        with patch('src.database.db_draft_operations.update_draft'):
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await set_description(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            mock_update.message.delete.assert_called_once()
            mock_context.bot.edit_message_text.assert_called_once()
            assert result == "SET_DATE"


@pytest.mark.asyncio
async def test_set_description_keyboard_structure(mock_update, mock_context):
    # –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    with patch('src.handlers.conversation_handler_states.SET_DATE', new='SET_DATE'):
        from src.event.create.set_parameter import set_description
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
        mock_update.message = MagicMock(spec=Message)
        mock_update.message.text = "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        mock_update.message.chat_id = 12345
        mock_update.message.message_id = 67890
        mock_update.message.delete = AsyncMock()

        mock_context.user_data = {
            "draft_id": 1,
            "bot_message_id": 54321
        }
        mock_context.bot_data = {"drafts_db_path": "test_db_path"}
        mock_context.bot = AsyncMock()

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è update_draft
        with patch('src.event.create.set_description.update_draft'):
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await set_description(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            call_args = mock_context.bot.edit_message_text.call_args[1]
            reply_markup = call_args['reply_markup']

            assert isinstance(reply_markup, InlineKeyboardMarkup)

            keyboard = reply_markup.inline_keyboard
            assert len(keyboard) == 1  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            assert len(keyboard[0]) == 1  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ

            button = keyboard[0][0]
            assert isinstance(button, InlineKeyboardButton)
            assert button.text == "‚õî –û—Ç–º–µ–Ω–∞"
            assert button.callback_data == "cancel_input"