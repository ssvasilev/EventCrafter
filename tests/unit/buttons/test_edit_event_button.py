import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import CallbackQuery, Message, User, InlineKeyboardMarkup


@pytest.mark.asyncio
async def test_edit_event_button_success(mock_update, mock_context):
    # –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    with patch('src.buttons.edit_event_button.EDIT_EVENT', new='EDIT_EVENT'):
        from temp.edit_event_button import edit_event_button

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
        mock_update.callback_query = MagicMock(spec=CallbackQuery)
        mock_update.callback_query.data = "edit_event|123"
        mock_update.callback_query.from_user = MagicMock(spec=User)
        mock_update.callback_query.from_user.id = 456  # ID –∞–≤—Ç–æ—Ä–∞
        mock_update.callback_query.message = MagicMock(spec=Message)
        mock_update.callback_query.message.message_id = 789
        mock_update.callback_query.message.text = "Original text"
        mock_update.callback_query.message.reply_markup = MagicMock()
        mock_update.callback_query.answer = AsyncMock()
        mock_update.callback_query.edit_message_text = AsyncMock()

        # –ú–æ–∫–∏—Ä—É–µ–º bot_data
        mock_context.bot_data = {"db_path": "test_db_path"}

        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_event
        with patch('src.buttons.edit_event_button.get_event') as mock_get_event:
            mock_get_event.return_value = {
                "creator_id": 456,  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "chat_id": 123,
                "description": "Test event",
                "date": "2023-01-01",
                "time": "12:00"
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await edit_event_button(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            mock_update.callback_query.answer.assert_not_called()
            mock_get_event.assert_called_once_with("test_db_path", "123")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ edit_message_text
            assert mock_update.callback_query.edit_message_text.call_count == 1

            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
            call_args, call_kwargs = mock_update.callback_query.edit_message_text.call_args

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            assert call_args[0] == "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (reply_markup)
            assert 'reply_markup' in call_kwargs
            reply_markup = call_kwargs['reply_markup']
            assert isinstance(reply_markup, InlineKeyboardMarkup)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = reply_markup.inline_keyboard
            assert len(keyboard) == 3  # 3 —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            assert len(keyboard[0]) == 2
            assert keyboard[0][0].text == "üìù –û–ø–∏—Å–∞–Ω–∏–µ"
            assert keyboard[0][0].callback_data == "edit_description|123"
            assert keyboard[0][1].text == "üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            assert keyboard[0][1].callback_data == "edit_limit|123"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            assert len(keyboard[1]) == 2
            assert keyboard[1][0].text == "üìÖ –î–∞—Ç–∞"
            assert keyboard[1][0].callback_data == "edit_date|123"
            assert keyboard[1][1].text == "üïí –í—Ä–µ–º—è"
            assert keyboard[1][1].callback_data == "edit_time|123"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            assert len(keyboard[2]) == 2
            assert keyboard[2][0].text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"
            assert keyboard[2][0].callback_data == "delete|123"
            assert keyboard[2][1].text == "‚õî –û—Ç–º–µ–Ω–∞"
            assert keyboard[2][1].callback_data == "cancel_input"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            assert mock_context.user_data["event_id"] == "123"
            assert mock_context.user_data["bot_message_id"] == 789
            assert mock_context.user_data["original_text"] == "Original text"
            assert isinstance(mock_context.user_data["original_reply_markup"], MagicMock)

            assert result == "EDIT_EVENT"


@pytest.mark.asyncio
async def test_edit_event_button_not_author(mock_update, mock_context):
    from temp.edit_event_button import edit_event_button

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
    mock_update.callback_query = MagicMock(spec=CallbackQuery)
    mock_update.callback_query.data = "edit_event|123"
    mock_update.callback_query.from_user = MagicMock(spec=User)
    mock_update.callback_query.from_user.id = 789  # –ù–µ –∞–≤—Ç–æ—Ä
    mock_update.callback_query.answer = AsyncMock()

    # –ú–æ–∫–∏—Ä—É–µ–º bot_data
    mock_context.bot_data = {"db_path": "test_db_path"}

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_event
    with patch('src.buttons.edit_event_button.get_event') as mock_get_event:
        mock_get_event.return_value = {
            "creator_id": 456,  # –î—Ä—É–≥–æ–π ID
            "chat_id": 123,
            "description": "Test event",
            "date": "2023-01-01",
            "time": "12:00"
        }

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = await edit_event_button(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_update.callback_query.answer.assert_called_once_with(
            "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
            show_alert=False
        )
        assert result == -1  # ConversationHandler.END

@pytest.mark.asyncio
async def test_edit_event_button_not_found(mock_update, mock_context):
    from temp.edit_event_button import edit_event_button

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
    mock_update.callback_query = MagicMock(spec=CallbackQuery)
    mock_update.callback_query.data = "edit_event|123"
    mock_update.callback_query.answer = AsyncMock()

    # –ú–æ–∫–∏—Ä—É–µ–º bot_data
    mock_context.bot_data = {"db_path": "test_db_path"}

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_event
    with patch('src.buttons.edit_event_button.get_event') as mock_get_event:
        mock_get_event.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = await edit_event_button(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_update.callback_query.answer.assert_called_once_with(
            "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            show_alert=True
        )
        assert result == -1  # ConversationHandler.END