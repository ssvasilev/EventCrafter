import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update, CallbackQuery, User, Chat
from telegram.ext import ContextTypes

@pytest.mark.asyncio
async def test_my_events_button_no_events(mock_update, mock_context):
    from src.buttons.my_events_button import my_events_button

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
    mock_update.callback_query = MagicMock(spec=CallbackQuery)
    mock_update.callback_query.from_user = MagicMock(spec=User)
    mock_update.callback_query.from_user.id = 123
    mock_update.callback_query.answer = AsyncMock()
    mock_update.callback_query.edit_message_text = AsyncMock()

    # –ú–æ–∫–∏—Ä—É–µ–º bot_data
    mock_context.bot_data = {"db_path": "test_db_path"}

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_events_by_participant
    with patch('src.buttons.my_events_button.get_events_by_participant') as mock_get_events:
        mock_get_events.return_value = []

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = await my_events_button(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_update.callback_query.answer.assert_called_once()
        mock_update.callback_query.edit_message_text.assert_called_once_with(
            "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏."
        )
        assert result is None

@pytest.mark.asyncio
async def test_my_events_button_with_events(mock_update, mock_context):
    from src.buttons.my_events_button import my_events_button

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
    mock_update.callback_query = MagicMock(spec=CallbackQuery)
    mock_update.callback_query.from_user = MagicMock(spec=User)
    mock_update.callback_query.from_user.id = 123
    mock_update.callback_query.answer = AsyncMock()
    mock_update.callback_query.edit_message_text = AsyncMock()

    # –ú–æ–∫–∏—Ä—É–µ–º bot –∏ –µ–≥–æ –º–µ—Ç–æ–¥—ã
    mock_context.bot = AsyncMock()
    mock_context.bot.send_message = AsyncMock()
    mock_context.bot.get_chat = AsyncMock(return_value=MagicMock(
        title="Test Chat",
        username="testchat",
        invite_link="https://t.me/testchat"
    ))

    # –ú–æ–∫–∏—Ä—É–µ–º bot_data
    mock_context.bot_data = {"db_path": "test_db_path"}

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_events_by_participant
    with patch('src.buttons.my_events_button.get_events_by_participant') as mock_get_events:
        mock_get_events.return_value = [
            {
                "chat_id": -100123,
                "message_id": 456,
                "description": "Test Event",
                "date": "2023-01-01",
                "time": "12:00",
                "creator_id": 123
            }
        ]

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = await my_events_button(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_update.callback_query.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ send_message
        assert mock_context.bot.send_message.call_count == 1

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        _, kwargs = mock_context.bot.send_message.call_args

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        assert kwargs['chat_id'] == 123
        assert kwargs['parse_mode'] == "HTML"
        assert kwargs['disable_web_page_preview'] is True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        expected_text = (
            "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ:\n\n"
            "üí¨ <b>Test Chat</b> (https://t.me/testchat):\n"
            "  - <a href='https://t.me/c/123/456'>üìÖ Test Event</a> (2023-01-01 12:00)\n\n"
        )
        assert kwargs['text'] == expected_text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ edit_message_text
        mock_update.callback_query.edit_message_text.assert_called_once_with(
            "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )

        assert result == -1  # ConversationHandler.END

@pytest.mark.asyncio
async def test_my_events_button_send_error(mock_update, mock_context):
    from src.buttons.my_events_button import my_events_button
    from unittest.mock import patch

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
    mock_update.callback_query = MagicMock(spec=CallbackQuery)
    mock_update.callback_query.from_user = MagicMock(spec=User)
    mock_update.callback_query.from_user.id = 123
    mock_update.callback_query.answer = AsyncMock()
    mock_update.callback_query.edit_message_text = AsyncMock()

    # –ú–æ–∫–∏—Ä—É–µ–º bot_data
    mock_context.bot_data = {"db_path": "test_db_path"}

    # –ú–æ–∫–∏—Ä—É–µ–º logger.error
    with patch('src.buttons.my_events_button.logger.error') as mock_logger_error:
        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_events_by_participant
        with patch('src.buttons.my_events_button.get_events_by_participant') as mock_get_events:
            mock_get_events.return_value = [
                {
                    "chat_id": -100123,
                    "message_id": 456,
                    "description": "Test Event",
                    "date": "2023-01-01",
                    "time": "12:00",
                    "creator_id": 123
                }
            ]

            # –ú–æ–∫–∏—Ä—É–µ–º send_message —Å –æ—à–∏–±–∫–æ–π
            mock_context.bot = AsyncMock()
            mock_context.bot.send_message = AsyncMock(side_effect=Exception("Send error"))

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await my_events_button(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            mock_update.callback_query.answer.assert_called_once()
            mock_update.callback_query.edit_message_text.assert_called_once_with(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º."
            )
            mock_logger_error.assert_called_once_with("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: Send error")
            assert result == -1  # ConversationHandler.END