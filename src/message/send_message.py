from datetime import datetime

import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import BadRequest
from telegram.ext import ContextTypes

from config import DB_PATH
from src.database.db_operations import get_event, get_participants, get_reserve, get_declined, update_message_id
from src.logger.logger import logger
from src.utils.pin_message import pin_message
from src.utils.utils import time_until_event, format_users_list

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
EMPTY_PARTICIPANTS_TEXT = "–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç."
EMPTY_RESERVE_TEXT = "–†–µ–∑–µ—Ä–≤ –ø—É—Å—Ç."
EMPTY_DECLINED_TEXT = "–û—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ç."


async def send_event_message(event_id, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.
    """
    try:
        db_path = context.bot_data.get("db_path", DB_PATH)
        event = get_event(db_path, event_id)
        if not event:
            logger.error(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        participants = get_participants(db_path, event_id)
        reserve = get_reserve(db_path, event_id)
        declined = get_declined(db_path, event_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text, reply_markup = await format_event_message(event, participants, reserve, declined, context)

        if message_id:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
                try:
                    msg = await context.bot.get_updates(limit=1)
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫, –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
                    return message_id
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                    message_id = None  # –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                message_id = None

        # –ï—Å–ª–∏ message_id=None –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {message.message_id}")

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        await pin_message(context, chat_id, message.message_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_message_id(db_path, event_id, message.message_id)
        return message.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_event_message: {e}")
        raise


async def format_event_message(event, participants, reserve, declined, context):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    participants_text = format_users_list(participants, EMPTY_PARTICIPANTS_TEXT)
    reserve_text = format_users_list(reserve, EMPTY_RESERVE_TEXT)
    declined_text = format_users_list(declined, EMPTY_DECLINED_TEXT)

    # –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    limit_text = "‚àû (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π)" if event["participant_limit"] is None else str(event["participant_limit"])

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤—É—é", callback_data=f"join|{event['id']}")],
        [InlineKeyboardButton("‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é", callback_data=f"leave|{event['id']}")],
        [InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{event['id']}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    tz = context.bot_data.get("tz")

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    time_until = time_until_event(event['date'], event['time'], tz)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏
    date = datetime.strptime(event["date"], "%d.%m.%Y").date()
    formatted_date = date.strftime("%d.%m.%Y (%A)")

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üì¢ <b>{event['description']}</b>\n"
        f"üìÖ <i>–î–∞—Ç–∞: </i> {formatted_date}\n"
        f"üïí <i>–í—Ä–µ–º—è: </i> {event['time']}\n"
        f"‚è≥ <i>–î–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: </i> {time_until}\n"
        f"üë• <i>–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: </i> {limit_text}\n\n"
        f"‚úÖ <i>–£—á–∞—Å—Ç–Ω–∏–∫–∏: </i>\n{participants_text}\n\n"
        f"‚è≥ <i>–†–µ–∑–µ—Ä–≤: </i>\n{reserve_text}\n\n"
        f"‚ùå <i>–û—Ç–∫–∞–∑–∞–≤—à–∏–µ—Å—è: </i>\n{declined_text}"
    )

    return message_text, reply_markup