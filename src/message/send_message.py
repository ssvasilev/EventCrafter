from datetime import datetime

import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from src.database.db_operations import get_event, get_participants, get_reserve, get_declined, update_message_id
from src.logger.logger import logger
from src.utils.pin_message import pin_message
from src.utils.utils import time_until_event, format_users_list

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
EMPTY_PARTICIPANTS_TEXT = "–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç."
EMPTY_RESERVE_TEXT = "–†–µ–∑–µ—Ä–≤ –ø—É—Å—Ç."
EMPTY_DECLINED_TEXT = "–û—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ç."

async def send_event_message(event_id, context, chat_id, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        db_path = context.bot_data["db_path"]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event = get_event(db_path, event_id)
        if not event:
            logger.error(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(event, '_fields'):  # –î–ª—è sqlite3.Row
            event = dict(zip(event._fields, event))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        participants_text = format_users_list(event["participants"], "–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç")
        reserve_text = format_users_list(event["reserve"], "–†–µ–∑–µ—Ä–≤ –ø—É—Å—Ç")
        declined_text = format_users_list(event["declined"], "–û—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ç")
        limit_text = "‚àû (–±–µ–∑ –ª–∏–º–∏—Ç–∞)" if not event["participant_limit"] else str(event["participant_limit"])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        event_date = datetime.strptime(event["date"], "%d.%m.%Y").strftime("%d.%m.%Y (%A)")
        time_until = time_until_event(event["date"], event["time"], context.bot_data.get("tz"))

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üì¢ <b>{event['description']}</b>\n"
            f"üìÖ <i>–î–∞—Ç–∞:</i> {event_date}\n"
            f"üïí <i>–í—Ä–µ–º—è:</i> {event['time']}\n"
            f"‚è≥ <i>–î–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</i> {time_until}\n"
            f"üë• <i>–õ–∏–º–∏—Ç:</i> {limit_text}\n\n"
            f"‚úÖ <i>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({event['participants_count']}):</i>\n{participants_text}\n\n"
            f"‚è≥ <i>–†–µ–∑–µ—Ä–≤:</i>\n{reserve_text}\n\n"
            f"‚ùå <i>–û—Ç–∫–∞–∑–∞–≤—à–∏–µ—Å—è:</i>\n{declined_text}"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤—É—é", callback_data=f"join|{event_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é", callback_data=f"leave|{event_id}")]
        ]
        if event["creator_id"] == context._user_id:
            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{event_id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                return message_id
            except Exception as edit_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {str(edit_error)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        new_message_id = message.message_id

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –ë–î
        update_message_id(db_path, event_id, new_message_id)

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.pin_chat_message(chat_id, new_message_id)
        except Exception as pin_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(pin_error)}")

        return new_message_id

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_event_message: {str(e)}")
        raise