from datetime import datetime

import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from src.database.db_operations import get_event, get_participants, get_reserve, get_declined, update_message_id
from src.logger.logger import logger
from src.utils.pin_message import pin_message
from src.utils.utils import time_until_event, format_users_list

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
EMPTY_PARTICIPANTS_TEXT = "–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç."
EMPTY_RESERVE_TEXT = "–†–µ–∑–µ—Ä–≤ –ø—É—Å—Ç."
EMPTY_DECLINED_TEXT = "–û—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ç."

async def send_event_message(event_id, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.
    :param event_id: ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞.
    :param chat_id: ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
    :return: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    db_path = context.bot_data.get("db_path")
    event = get_event(db_path, event_id)
    if not event:
        logger.error(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return None

    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ä–µ–∑–µ—Ä–≤ –∏ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è
        participants = get_participants(db_path, event_id)
        reserve = get_reserve(db_path, event_id)
        declined = get_declined(db_path, event_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
        participants_text = format_users_list(participants, EMPTY_PARTICIPANTS_TEXT)
        reserve_text = format_users_list(reserve, EMPTY_RESERVE_TEXT)
        declined_text = format_users_list(declined, EMPTY_DECLINED_TEXT)

        # –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        limit_text = "‚àû (–±–µ–∑ –ª–∏–º–∏—Ç–∞)" if event["participant_limit"] is None else str(event["participant_limit"])

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤—É—é", callback_data=f"join|{event_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é", callback_data=f"leave|{event_id}")],
            [InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{event_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        tz = context.bot_data.get("tz")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        time_until = time_until_event(event['date'], event['time'], tz)
        date = datetime.strptime(event["date"], "%d.%m.%Y").date()
        formatted_date = date.strftime("%d.%m.%Y (%A)")

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üì¢ <b>{event['description']}</b>\n"
            f"üìÖ <i>–î–∞—Ç–∞: </i> {formatted_date}\n"
            f"üïí <i>–í—Ä–µ–º—è: </i> {event['time']}\n"
            f"‚è≥ <i>–î–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: </i> {time_until}\n"
            f"üë• <i>–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: </i> {limit_text}\n\n"
            f"‚úÖ <i>–£—á–∞—Å—Ç–Ω–∏–∫–∏: </i>\n{participants_text}\n\n"
            f"‚è≥ <i>–†–µ–∑–µ—Ä–≤: </i>\n{reserve_text}\n\n"
            f"‚ùå <i>–û—Ç–∫–∞–∑–∞–≤—à–∏–µ—Å—è: </i>\n{declined_text}"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                return message_id
            except telegram.error.BadRequest as e:
                if "Message is not modified" not in str(e):
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {message_id}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        new_message_id = message.message_id
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –±–∞–∑–µ
        if not update_message_id(db_path, event_id, new_message_id):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å message_id –≤ –ë–î –¥–ª—è {event_id}")

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await pin_message(context, chat_id, new_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        return new_message_id

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_event_message: {e}")
        raise