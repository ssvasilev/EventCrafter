from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import BadRequest

from src.database.db_operations import add_event, update_event_field, add_scheduled_job
from src.database.db_draft_operations import update_draft, get_draft, delete_draft
from src.jobs.notification_jobs import unpin_and_delete_event, send_notification
from src.logger.logger import logger
from src.message.send_message import send_event_message

from src.handlers.conversation_handler_states import SET_LIMIT

async def set_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    limit_text = update.message.text
    try:
        limit = int(limit_text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–º–∏—Ç –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        if limit < 0:
            raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")

        # –ü–æ–ª—É—á–∞–µ–º ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑ user_data
        draft_id = context.user_data["draft_id"]

        # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        update_draft(
            db_path=context.bot_data["drafts_db_path"],
            draft_id=draft_id,
            status="DONE",
            participant_limit=limit
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        draft = get_draft(context.bot_data["drafts_db_path"], draft_id)
        if not draft:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —á–µ—Ä–Ω–æ–≤–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        event_id = add_event(
            db_path=context.bot_data["db_path"],
            description=draft["description"],
            date=draft["date"],
            time=draft["time"],
            limit=limit if limit != 0 else None,
            creator_id=draft["creator_id"],
            chat_id=draft["chat_id"],
            message_id=None  # message_id –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

        if not event_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return ConversationHandler.END

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ message_id
        try:
            message_id = await send_event_message(event_id, context, draft["chat_id"])
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å message_id
            update_event_field(context.bot_data["db_path"], event_id, "message_id", message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return ConversationHandler.END

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –¥–ª—è —Å—Å—ã–ª–∫–∏
            chat_id = draft["chat_id"]
            if str(chat_id).startswith("-100"):  # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
                chat_id_link = int(str(chat_id)[4:])  # –£–±–∏—Ä–∞–µ–º "-100" –≤ –Ω–∞—á–∞–ª–µ
            else:
                chat_id_link = chat_id  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            event_link = f"https://t.me/c/{chat_id_link}/{message_id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            message = (
                f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üì¢ <a href='{event_link}'>{draft['description']}</a>\n"
                f"üìÖ –î–∞—Ç–∞: {draft['date']}\n"
                f"üïí –í—Ä–µ–º—è: {draft['time']}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=draft["creator_id"],
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é: {e}")

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        delete_draft(context.bot_data["drafts_db_path"], draft_id)

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        try:
            await context.bot.delete_message(
                chat_id=draft["chat_id"],
                message_id=context.user_data["bot_message_id"]
            )
        except BadRequest as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ context.bot_data
        tz = context.bot_data["tz"]

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_datetime = datetime.strptime(f"{draft['date']} {draft['time']}", "%d.%m.%Y %H:%M")
        event_datetime = event_datetime.replace(tzinfo=tz)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        job_day = context.job_queue.run_once(
            send_notification,
            when=event_datetime - timedelta(days=1),
            data={"event_id": event_id, "time_until": "1 –¥–µ–Ω—å"},
            name=f"notification_{event_id}_day"
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        job_minutes = context.job_queue.run_once(
            send_notification,
            when=event_datetime - timedelta(minutes=15),
            data={"event_id": event_id, "time_until": "15 –º–∏–Ω—É—Ç"},
            name=f"notification_{event_id}_minutes"
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        job_unpin = context.job_queue.run_once(
            unpin_and_delete_event,
            when=event_datetime,
            data={"event_id": event_id, "chat_id": draft["chat_id"]},
            name=f"unpin_delete_{event_id}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_scheduled_job(context.bot_data["db_path"], event_id, job_day.id, draft["chat_id"], (event_datetime - timedelta(days=1)).isoformat(), job_type="notification_day")
        add_scheduled_job(context.bot_data["db_path"], event_id, job_minutes.id, draft["chat_id"], (event_datetime - timedelta(minutes=15)).isoformat(), job_type="notification_minutes")
        add_scheduled_job(context.bot_data["db_path"], event_id, job_unpin.id, draft["chat_id"], event_datetime.isoformat(), job_type="unpin_delete")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        context.user_data.clear()
        return ConversationHandler.END

    except ValueError as e:
        # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        error_message = (
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
        try:
            await context.bot.edit_message_text(
                chat_id=update.message.chat_id,
                message_id=context.user_data["bot_message_id"],
                text=error_message,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]]),
                parse_mode="HTML"
            )
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")

        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SET_LIMIT
        return SET_LIMIT