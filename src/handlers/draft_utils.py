from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest

from src.database.db_draft_operations import update_draft, delete_draft, get_draft, add_draft
from src.database.db_operations import add_event, get_event, update_event_field
from src.message.send_message import send_event_message, safe_edit_message
from src.database.session_manager import SessionManager
from src.logger.logger import logger

async def start_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id, field_name):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        event = get_event(context.bot_data["db_path"], event_id)
        if not event:
            await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=f"EDIT_{field_name}",
            event_id=event_id,
            original_message_id=query.message.message_id,
            bot_message_id=query.message.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            description=event["description"],
            date=event["date"],
            time=event["time"],
            participant_limit=event["participant_limit"]
        )

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_manager = SessionManager(context.bot_data["sessions_db_path"])
        session_manager.create_session(query.from_user.id, query.message.chat_id, draft_id)

        field_prompts = {
            "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
            "time": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
            "limit": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):"
        }

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{draft_id}")]]

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(
            context.bot,
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=field_prompts[field_name],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

async def process_draft_step(update: Update, context: ContextTypes.DEFAULT_TYPE, draft):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_input = update.message.text.strip()
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    session_manager = SessionManager(context.bot_data["sessions_db_path"])

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
        if not session_manager.get_active_session(user_id, chat_id) == draft["id"]:
            raise ValueError("–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è")

        if draft["status"].startswith("EDIT_"):
            await process_edit_step(update, context, draft)
        else:
            if draft["status"] == "AWAIT_DESCRIPTION":
                await _process_description(context, draft, user_input, chat_id)
            elif draft["status"] == "AWAIT_DATE":
                await _process_date(context, draft, user_input, chat_id)
            elif draft["status"] == "AWAIT_TIME":
                await _process_time(context, draft, user_input, chat_id)
            elif draft["status"] == "AWAIT_LIMIT":
                await _process_limit(update, context, draft, user_input, chat_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        await _handle_validation_error(context, draft, chat_id, str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {str(e)}")
        await _handle_processing_error(context, draft, chat_id)
        session_manager.clear_session(user_id, chat_id)

async def _process_description(context, draft, description, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    update_draft(
        db_path=context.bot_data["drafts_db_path"],
        draft_id=draft["id"],
        status="AWAIT_DATE",
        description=description
    )

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{draft['id']}")]]
    await _edit_draft_message(
        context,
        chat_id,
        draft["bot_message_id"],
        f"üì¢ {description}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        keyboard
    )

async def _process_date(context, draft, date_input, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    try:
        datetime.strptime(date_input, "%d.%m.%Y").date()
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

    update_draft(
        db_path=context.bot_data["drafts_db_path"],
        draft_id=draft["id"],
        status="AWAIT_TIME",
        date=date_input
    )

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{draft['id']}")]]
    await _edit_draft_message(
        context,
        chat_id,
        draft["bot_message_id"],
        f"üì¢ {draft['description']}\n\nüìÖ –î–∞—Ç–∞: {date_input}\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)",
        keyboard
    )

async def _process_time(context, draft, time_input, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_input, "%H:%M").time()
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")

    update_draft(
        db_path=context.bot_data["drafts_db_path"],
        draft_id=draft["id"],
        status="AWAIT_LIMIT",
        time=time_input
    )

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{draft['id']}")]]
    await _edit_draft_message(
        context,
        chat_id,
        draft["bot_message_id"],
        f"üì¢ {draft['description']}\n\nüìÖ –î–∞—Ç–∞: {draft['date']}\nüïí –í—Ä–µ–º—è: {time_input}\n\n–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):",
        keyboard
    )

async def _process_limit(update, context, draft, limit_input, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞
    try:
        limit = int(limit_input)
        if limit < 0:
            raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0")

    # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    event_id = add_event(
        db_path=context.bot_data["db_path"],
        description=draft["description"],
        date=draft["date"],
        time=draft["time"],
        limit=limit if limit != 0 else None,
        creator_id=update.message.from_user.id,
        chat_id=chat_id,
        message_id=draft["bot_message_id"]
    )

    if not event_id:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    await send_event_message(
        event_id=event_id,
        context=context,
        chat_id=chat_id,
        message_id=draft["bot_message_id"]
    )

    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ —Å–µ—Å—Å–∏—é
    delete_draft(context.bot_data["drafts_db_path"], draft["id"])
    SessionManager(context.bot_data["sessions_db_path"]).clear_session(update.message.from_user.id, chat_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
        reply_to_message_id=draft["bot_message_id"]
    )


async def _edit_draft_message(context, chat_id, message_id, text, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    try:
        await safe_edit_message(
            context.bot,
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except BadRequest as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {str(e)}")
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def _handle_validation_error(context, draft, chat_id, error_msg):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå {error_msg}",
            reply_to_message_id=draft.get("bot_message_id")
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e)}")

async def _handle_processing_error(context, draft, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞",
            reply_to_message_id=draft.get("bot_message_id")
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e)}")

async def process_edit_step(update: Update, context: ContextTypes.DEFAULT_TYPE, draft):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    user_input = update.message.text.strip()
    field = draft["status"].split("_")[1].lower()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ (EDIT_DESCRIPTION -> description)
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
        session_manager = SessionManager(context.bot_data["sessions_db_path"])
        if not session_manager.get_active_session(user_id, chat_id) == draft["id"]:
            raise ValueError("–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        if field == "description":
            await _update_description(context, draft, user_input, chat_id)
        elif field == "date":
            await _update_date(context, draft, user_input, chat_id)
        elif field == "time":
            await _update_time(context, draft, user_input, chat_id)
        elif field == "limit":
            await _update_limit(context, draft, user_input, chat_id)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {field}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        await _send_validation_error(context, chat_id, draft["bot_message_id"], str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        await _send_processing_error(context, chat_id, draft["bot_message_id"])
        session_manager.clear_session(user_id, chat_id)

async def _update_description(context, draft, new_description, chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if not new_description or len(new_description) > 500:
        raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event_field(
        db_path=context.bot_data["db_path"],
        event_id=draft["event_id"],
        field="description",
        value=new_description
    )

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await _restore_original_message(context, draft, chat_id)

async def _update_date(context, draft, new_date, chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        datetime.strptime(new_date, "%d.%m.%Y").date()
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event_field(
        db_path=context.bot_data["db_path"],
        event_id=draft["event_id"],
        field="date",
        value=new_date
    )

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await _restore_original_message(context, draft, chat_id)

async def _update_time(context, draft, new_time, chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        datetime.strptime(new_time, "%H:%M").time()
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event_field(
        db_path=context.bot_data["db_path"],
        event_id=draft["event_id"],
        field="time",
        value=new_time
    )

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await _restore_original_message(context, draft, chat_id)

async def _update_limit(context, draft, new_limit, chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        limit = int(new_limit)
        if limit < 0:
            raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event_field(
        db_path=context.bot_data["db_path"],
        event_id=draft["event_id"],
        field="participant_limit",
        value=limit if limit != 0 else None
    )

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await _restore_original_message(context, draft, chat_id)

async def _restore_original_message(context, draft, chat_id):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await send_event_message(
        event_id=draft["event_id"],
        context=context,
        chat_id=chat_id,
        message_id=draft["original_message_id"]
    )

    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    delete_draft(context.bot_data["drafts_db_path"], draft["id"])

    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    SessionManager(context.bot_data["sessions_db_path"]).clear_session(draft["creator_id"], chat_id)

async def _send_validation_error(context, chat_id, reply_to_id, error_msg):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå {error_msg}",
            reply_to_message_id=reply_to_id
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e)}")

async def _send_processing_error(context, chat_id, reply_to_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞",
            reply_to_message_id=reply_to_id
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e)}")