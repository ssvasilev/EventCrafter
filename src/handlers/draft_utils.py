from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.error import BadRequest

from src.database.db_draft_operations import update_draft, delete_draft, get_user_chat_draft, add_draft
from src.database.db_operations import add_event, get_event
from src.message.send_message import send_event_message
from src.logger.logger import logger


async def start_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id, field_name):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    query = update.callback_query
    await query.answer()

    event = get_event(context.bot_data["db_path"], event_id)
    if not event:
        await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    draft_id = add_draft(
        db_path=context.bot_data["drafts_db_path"],
        creator_id=query.from_user.id,
        chat_id=query.message.chat_id,
        status=f"EDIT_{field_name}",
        event_id=event_id,
        original_message_id=query.message.message_id,
        description=event["description"],
        date=event["date"],
        time=event["time"],
        participant_limit=event["participant_limit"]
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    field_prompts = {
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
        "time": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
        "limit": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):"
    }

    keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_input|{draft_id}")]]
    await query.edit_message_text(
        text=field_prompts[field_name],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_draft_step(update: Update, context: ContextTypes.DEFAULT_TYPE, draft):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    user_input = update.message.text
    chat_id = update.message.chat_id

    try:
        if draft["status"].startswith("EDIT_"):
            await process_edit_step(update, context, draft)
        else:
            if draft["status"] == "AWAIT_DESCRIPTION":
                await _process_description(update, context, draft, user_input)
            elif draft["status"] == "AWAIT_DATE":
                await _process_date(update, context, draft, user_input)
            elif draft["status"] == "AWAIT_TIME":
                await _process_time(update, context, draft, user_input)
            elif draft["status"] == "AWAIT_LIMIT":
                await _process_limit(update, context, draft, user_input)

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞"
        )

async def _process_description(update, context, draft, description):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    update_draft(
        db_path=context.bot_data["drafts_db_path"],
        draft_id=draft["id"],
        status="AWAIT_DATE",
        description=description
    )

    keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft['id']}")]]
    await context.bot.edit_message_text(
        chat_id=update.message.chat_id,
        message_id=draft["bot_message_id"],
        text=f"üì¢ {description}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def _process_date(update, context, draft, date_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        datetime.strptime(date_input, "%d.%m.%Y").date()

        update_draft(
            db_path=context.bot_data["drafts_db_path"],
            draft_id=draft["id"],
            status="AWAIT_TIME",
            date=date_input
        )

        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft['id']}")]]
        await context.bot.edit_message_text(
            chat_id=update.message.chat_id,
            message_id=draft["bot_message_id"],
            text=f"üì¢ {draft['description']}\n\nüìÖ –î–∞—Ç–∞: {date_input}\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except ValueError:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
        )

async def _process_time(update, context, draft, time_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        datetime.strptime(time_input, "%H:%M").time()

        update_draft(
            db_path=context.bot_data["drafts_db_path"],
            draft_id=draft["id"],
            status="AWAIT_LIMIT",
            time=time_input
        )

        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft['id']}")]]
        await context.bot.edit_message_text(
            chat_id=update.message.chat_id,
            message_id=draft["bot_message_id"],
            text=f"üì¢ {draft['description']}\n\n"
                 f"üìÖ –î–∞—Ç–∞: {draft['date']}\n"
                 f"üïí –í—Ä–µ–º—è: {time_input}\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except ValueError:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú"
        )

async def _process_limit(update, context, draft, limit_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        limit = int(limit_input)
        if limit < 0:
            raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_id = add_event(
            db_path=context.bot_data["db_path"],
            description=draft["description"],
            date=draft["date"],
            time=draft["time"],
            limit=limit if limit != 0 else None,
            creator_id=update.message.from_user.id,
            chat_id=update.message.chat_id,
            message_id=draft["bot_message_id"]
        )

        if not event_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_event_message(
            event_id=event_id,
            context=context,
            chat_id=update.message.chat_id,
            message_id=draft["bot_message_id"]
        )

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        delete_draft(context.bot_data["drafts_db_path"], draft["id"])

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–æ–¥–æ–º –ª–∏–º–∏—Ç–∞
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ reply –∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
            reply_to_message_id=draft["bot_message_id"]
        )

    except ValueError:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
            reply_to_message_id=draft["bot_message_id"]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            reply_to_message_id=draft["bot_message_id"]
        )


async def process_edit_step(update: Update, context: ContextTypes.DEFAULT_TYPE, draft):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = draft["status"].split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ (EDIT_description -> description)
    user_input = update.message.text

    if field == "description":
        await _update_event_field(context, draft, "description", user_input)
    elif field == "date":
        await _validate_and_update(update, context, draft, "date", user_input, "%d.%m.%Y", "–î–î.–ú–ú.–ì–ì–ì–ì")
    elif field == "time":
        await _validate_and_update(update, context, draft, "time", user_input, "%H:%M", "–ß–ß:–ú–ú")
    elif field == "limit":
        await _update_participant_limit(update, context, draft, user_input)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await update.message.delete()
    except BadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def _update_event_field(context, draft, field, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    from src.database.db_operations import update_event_field

    update_event_field(
        db_path=context.bot_data["db_path"],
        event_id=draft["event_id"],
        field=field,
        value=value
    )
    await _finalize_edit(context, draft)


async def _validate_and_update(update, context, draft, field, value, fmt, error_hint):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ"""
    from datetime import datetime
    try:
        datetime.strptime(value, fmt)  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        await _update_event_field(context, draft, field, value)
    except ValueError:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {error_hint}"
        )


async def _update_participant_limit(update, context, draft, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        limit = int(value)
        if limit < 0:
            raise ValueError
        await _update_event_field(
            context, draft,
            "participant_limit",
            limit if limit != 0 else None
        )
    except ValueError:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0"
        )


async def _finalize_edit(context, draft):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    from src.message.send_message import send_event_message

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await send_event_message(
        event_id=draft["event_id"],
        context=context,
        chat_id=draft["chat_id"],
        message_id=draft["original_message_id"]
    )

    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    delete_draft(context.bot_data["drafts_db_path"], draft["id"])