import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.error import BadRequest

from config import tz
from src.database.db_draft_operations import update_draft, delete_draft, get_user_chat_draft, add_draft, get_draft
from src.database.db_operations import add_event, get_event
from src.jobs.notification_jobs import schedule_notifications, schedule_unpin_and_delete, \
    remove_existing_notification_jobs, remove_existing_job
from src.message.send_message import send_event_message
from src.logger.logger import logger


async def start_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id, field_name):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    query = update.callback_query

    try:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query

        event = get_event(context.bot_data["db_path"], event_id)
        if not event:
            await _show_input_error(
                update, context,
                "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
        if query.from_user.id != event["creator_id"]:
            await _show_input_error(
                update, context,
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
            )
            return

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=f"EDIT_{field_name}",
            event_id=event_id,
            original_message_id=query.message.message_id,
            description=event["description"],
            date=event["date"],
            time=event["time"],
            participant_limit=event["participant_limit"],
            is_from_template=False
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        field_prompts = {
            "description": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            "date": "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
            "time": "üïí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
            "limit": "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):"
        }

        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_input|{draft_id}")]]

        try:
            await query.edit_message_text(
                text=field_prompts[field_name],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await _show_input_error(
                update, context,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è {field_name}: {e}")
        await _show_input_error(
            update, context,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )

async def process_draft_step(update: Update, context: ContextTypes.DEFAULT_TYPE, draft):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    user_input = update.message.text
    chat_id = update.message.chat_id

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º current_draft_id –≤ user_data
        context.user_data['current_draft_id'] = draft['id']
        if draft["status"].startswith("EDIT_"):
            await process_edit_step(update, context, draft)
        else:
            if draft["status"] == "AWAIT_DESCRIPTION":
                await _process_description(update, context, draft, user_input)
            elif draft.get('is_from_template') and draft['status'] == 'AWAIT_DATE':
                await _process_date(update, context, draft, user_input)
            elif draft["status"] == "AWAIT_DATE":
                await _process_date(update, context, draft, user_input)
            elif draft["status"] == "AWAIT_TIME":
                await _process_time(update, context, draft, user_input)
            elif draft["status"] == "AWAIT_LIMIT":
                await _process_limit(update, context, draft, user_input)

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞"
        )

async def _process_description(update, context, draft, description):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        update_draft(
            db_path=context.bot_data["drafts_db_path"],
            draft_id=draft["id"],
            status="AWAIT_DATE",
            description=description
        )

        # 2. –ü–æ–ª—É—á–∞–µ–º –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–∑ –±–∞–∑—ã
        updated_draft = get_draft(context.bot_data["drafts_db_path"], draft["id"])
        if not updated_draft:
            raise ValueError("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bot_message_id
        if not updated_draft.get("bot_message_id"):
            raise ValueError("bot_message_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ")

        # 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft['id']}")]]
        new_text = f"üì¢ {description}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"

        # 5. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.edit_message_text(
                chat_id=update.message.chat_id,
                message_id=int(updated_draft["bot_message_id"]),  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
                text=new_text,
                reply_markup=InlineKeyboardMarkup(keyboard))

        except (BadRequest, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=new_text,
                reply_markup=InlineKeyboardMarkup(keyboard))

            # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ
            update_draft(
                db_path=context.bot_data["drafts_db_path"],
                draft_id=draft["id"],
                bot_message_id=new_message.message_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except BadRequest:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}", exc_info=True)
        await _show_input_error(update, context, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞")

async def _process_date(update, context, draft, date_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å —É—á—ë—Ç–æ–º —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        datetime.strptime(date_input, "%d.%m.%Y").date()

        # –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ - –æ—Å–æ–±—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        if isinstance(draft, dict) and draft.get('is_from_template'):
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            event_id = add_event(
                db_path=context.bot_data["db_path"],
                description=draft['description'],
                date=date_input,
                time=draft['time'],
                limit=draft['participant_limit'],
                creator_id=update.message.from_user.id,
                chat_id=update.message.chat_id,
                message_id=None
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_event_message(
                event_id=event_id,
                context=context,
                chat_id=update.message.chat_id,
                message_id=None
            )

            # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
            delete_draft(context.bot_data["drafts_db_path"], draft['id'])
            if 'current_draft_id' in context.user_data:
                del context.user_data['current_draft_id']

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await update.message.delete()
            except BadRequest:
                pass

            return

        # –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–Ω–µ —à–∞–±–ª–æ–Ω)
        update_draft(
            db_path=context.bot_data["drafts_db_path"],
            draft_id=draft['id'],
            status="AWAIT_TIME",
            date=date_input
        )

        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft['id']}")]]
        await context.bot.edit_message_text(
            chat_id=update.message.chat_id,
            message_id=draft["bot_message_id"],
            text=f"üì¢ {draft['description']}\n\nüìÖ –î–∞—Ç–∞: {date_input}\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except ValueError:
        await _show_input_error(
            update, context,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
        )

async def _process_time(update, context, draft, time_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏"""
    try:
        datetime.strptime(time_input, "%H:%M").time()
        update_draft(
            db_path=context.bot_data["drafts_db_path"],
            draft_id=draft["id"],
            status="AWAIT_LIMIT",
            time=time_input
        )

        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft['id']}")]]
        await context.bot.edit_message_text(
            chat_id=update.message.chat_id,
            message_id=draft["bot_message_id"],
            text=f"üì¢ {draft['description']}\n\n"
                 f"üìÖ –î–∞—Ç–∞: {draft['date']}\n"
                 f"üïí –í—Ä–µ–º—è: {time_input}\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except ValueError:
        await _show_input_error(
            update, context,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú"
        )

async def _process_limit(update, context, draft, limit_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        limit = int(limit_input)
        if limit < 0:
            raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bot_message_id –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
        bot_message_id = draft.get("bot_message_id")
        if not bot_message_id:
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è..."
            )
            bot_message_id = message.message_id

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_id = add_event(
            db_path=context.bot_data["db_path"],
            description=draft["description"],
            date=draft["date"],
            time=draft["time"],
            limit=limit if limit != 0 else None,
            creator_id=update.message.from_user.id,
            chat_id=update.message.chat_id,
            message_id=bot_message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        )

        if not event_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        await send_event_message(
            event_id=event_id,
            context=context,
            chat_id=update.message.chat_id,
            message_id=bot_message_id
        )

        # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ—Å–ª–µ add_event)
        event_datetime = datetime.strptime(f"{draft['date']} {draft['time']}", "%d.%m.%Y %H:%M")
        event_datetime = event_datetime.replace(tzinfo=tz)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await schedule_notifications(
            event_id=event_id,
            context=context,
            event_datetime=event_datetime,
            chat_id=update.message.chat_id
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        await schedule_unpin_and_delete(
            event_id=event_id,
            context=context,
            chat_id=update.message.chat_id
        )

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        delete_draft(context.bot_data["drafts_db_path"], draft["id"])

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–æ–¥–æ–º –ª–∏–º–∏—Ç–∞
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –¥–ª—è —Å—Å—ã–ª–∫–∏
            chat_id = draft["chat_id"]
            if str(chat_id).startswith("-100"):  # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
                chat_id_link = int(str(chat_id)[4:])  # –£–±–∏—Ä–∞–µ–º "-100" –≤ –Ω–∞—á–∞–ª–µ
            else:
                chat_id_link = chat_id  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            message_id = draft["bot_message_id"]
            event_link = f"https://t.me/c/{chat_id_link}/{message_id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            message = (
                f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üì¢ <a href='{event_link}'>{draft['description']}</a>\n"
                f"üìÖ –î–∞—Ç–∞: {draft['date']}\n"
                f"üïí –í—Ä–µ–º—è: {draft['time']}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=draft["creator_id"],
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é: {e}")

    except ValueError:
        await _show_input_error(
            update, context,
            "‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0 (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞)"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            reply_to_message_id=draft["bot_message_id"]
        )


async def process_edit_step(update: Update, context: ContextTypes.DEFAULT_TYPE, draft):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫"""
    user = update.message.from_user if update.message else update.callback_query.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
    event = get_event(context.bot_data["db_path"], draft["event_id"])
    if user.id != event["creator_id"]:
        await _show_input_error(
            update, context,
            "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        )
        return

    field = draft["status"].split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
    user_input = update.message.text if update.message else None

    if field == "description":
        await _update_event_field(context, draft, "description", user_input)
    elif field == "date":
        await _validate_and_update(update, context, draft, "date", user_input, "%d.%m.%Y", "–î–î.–ú–ú.–ì–ì–ì–ì")
    elif field == "time":
        await _validate_and_update(update, context, draft, "time", user_input, "%H:%M", "–ß–ß:–ú–ú")
    elif field == "limit":
        await _update_participant_limit(update, context, draft, user_input)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    if update.message:
        try:
            await update.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def _update_event_field(context, draft, field, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    from src.database.db_operations import update_event_field

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event_field(
        db_path=context.bot_data["db_path"],
        event_id=draft["event_id"],
        field=field,
        value=value
    )

    # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if field in ["date", "time"]:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        remove_existing_notification_jobs(draft["event_id"], context)
        remove_existing_job(draft["event_id"], context)  # –î–ª—è –∑–∞–¥–∞—á–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        event = get_event(context.bot_data["db_path"], draft["event_id"])
        if event:
            try:
                event_datetime = datetime.strptime(
                    f"{event['date']} {event['time']}",
                    "%d.%m.%Y %H:%M"
                ).replace(tzinfo=tz)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                await schedule_notifications(
                    event_id=draft["event_id"],
                    context=context,
                    event_datetime=event_datetime,
                    chat_id=draft["chat_id"]
                )

                await schedule_unpin_and_delete(
                    event_id=draft["event_id"],
                    context=context,
                    chat_id=draft["chat_id"]
                )
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}")

    await _finalize_edit(context, draft)


async def _validate_and_update(update, context, draft, field, value, fmt, error_hint):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫"""
    try:
        datetime.strptime(value, fmt)  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        await _update_event_field(context, draft, field, value)
    except ValueError:
        await _show_input_error(
            update, context,
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {field}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {error_hint}"
        )


async def _update_participant_limit(update, context, draft, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫"""
    try:
        limit = int(value)
        if limit < 0:
            raise ValueError
        await _update_event_field(
            context, draft,
            "participant_limit",
            limit if limit != 0 else None
        )
    except ValueError:
        await _show_input_error(
            update, context,
            "‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0 (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞)"
        )


async def _finalize_edit(context, draft):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    from src.message.send_message import send_event_message

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await send_event_message(
        event_id=draft["event_id"],
        context=context,
        chat_id=draft["chat_id"],
        message_id=draft["original_message_id"]
    )

    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    delete_draft(context.bot_data["drafts_db_path"], draft["id"])

async def _show_input_error(update, context, error_text):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        if update.message:
            await context.bot.answer_callback_query(
                callback_query_id=update.message.message_id,
                text=error_text,
                show_alert=False
            )
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
        if update.message:
            try:
                await update.message.delete()
            except BadRequest:
                pass
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É: {e}")
        # –§–æ–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_text
            )
            await asyncio.sleep(5)
            await msg.delete()
        except Exception as fallback_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {fallback_error}")
