from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from telegram.error import BadRequest
import logging

from src.event.create.set_date import set_date
from src.event.create.set_limit import set_limit
from src.event.create.set_time import set_time
from src.handlers.cancel_handler import cancel, cancel_input
from src.handlers.conversation_handler_states import SET_DATE, SET_TIME, SET_LIMIT
from src.database.db_draft_operations import add_draft, update_draft
from src.logger.logger import logger

async def mention_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.entities:
        return

    user_id = update.message.from_user.id
    chat_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "active_drafts" in context.bot_data and str(user_id) in context.bot_data["active_drafts"]:
        active_draft = context.bot_data["active_drafts"][str(user_id)]
        context.user_data.update({
            "draft_id": active_draft["draft_id"],
            "bot_message_id": active_draft["bot_message_id"],
            "current_state": active_draft["current_state"]
        })
        return active_draft["current_state"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
    for entity in update.message.entities:
        if entity.type == "mention" and update.message.text[entity.offset:entity.offset + entity.length] == f"@{context.bot.username}":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            mention_text = update.message.text[entity.offset + entity.length:].strip()

            if mention_text:
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
                    draft_id = add_draft(
                        db_path=context.bot_data["drafts_db_path"],
                        creator_id=user_id,
                        chat_id=chat_id,
                        status="AWAIT_DATE",
                        description=mention_text,
                        current_state="SET_DATE"
                    )

                    if not draft_id:
                        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
                        return ConversationHandler.END

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
                    keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞—Ç—ã
                    sent_message = await update.message.reply_text(
                        f"üì¢ {mention_text}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                        reply_markup=reply_markup,
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
                    context.user_data.update({
                        "draft_id": draft_id,
                        "bot_message_id": sent_message.message_id,
                        "description": mention_text,
                        "current_state": "SET_DATE"
                    })

                    if "active_drafts" not in context.bot_data:
                        context.bot_data["active_drafts"] = {}
                    context.bot_data["active_drafts"][str(user_id)] = {
                        "draft_id": draft_id,
                        "bot_message_id": sent_message.message_id,
                        "current_state": "SET_DATE",
                        "chat_id": chat_id,
                        "creator_id": user_id
                    }

                    # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –±–∞–∑–µ
                    update_draft(
                        db_path=context.bot_data["drafts_db_path"],
                        draft_id=draft_id,
                        bot_message_id=sent_message.message_id,
                        current_state="SET_DATE"
                    )

                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await update.message.delete()
                    except BadRequest as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                    return SET_DATE

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    return ConversationHandler.END

            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—É—Å—Ç–æ–π
                keyboard = [
                    [InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_event")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_events")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                try:
                    sent_message = await update.message.reply_text(
                        "–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –º–µ–Ω—è! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                        reply_markup=reply_markup,
                    )
                    context.user_data["bot_message_id"] = sent_message.message_id

                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
                    try:
                        await update.message.delete()
                    except BadRequest as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É—Å—Ç–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

                return ConversationHandler.END

# ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
conv_handler_create_mention = ConversationHandler(
    entry_points=[MessageHandler(filters.Entity("mention") & filters.TEXT, mention_handler)],
    states={
        SET_DATE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_date),
            CallbackQueryHandler(cancel_input, pattern="^cancel_input$"),
        ],
        SET_TIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_time),
            CallbackQueryHandler(cancel_input, pattern="^cancel_input$"),
        ],
        SET_LIMIT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_limit),
            CallbackQueryHandler(cancel_input, pattern="^cancel_input$"),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=False,
)