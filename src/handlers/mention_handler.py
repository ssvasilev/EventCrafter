from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.error import BadRequest

from src.event.create.set_date import set_date
from src.handlers.cancel_handler import cancel_input
from src.handlers.conversation_handler_states import SET_DESCRIPTION, SET_DATE
from src.database.db_draft_operations import add_draft, get_user_draft, delete_draft
from src.logger.logger import logger

async def mention_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    if not update.message or not update.message.entities:
        return ConversationHandler.END

    user_id = update.message.from_user.id
    chat_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
    active_draft = get_user_draft(context.bot_data["drafts_db_path"], user_id)
    if active_draft:
        try:
            delete_draft(context.bot_data["drafts_db_path"], active_draft["id"])
        except Exception as e:
            logger.error(f"Error deleting old draft: {e}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    mention_text = None
    for entity in update.message.entities:
        if entity.type == "mention" and update.message.text[entity.offset:entity.offset + entity.length] == f"@{context.bot.username}":
            mention_text = update.message.text[entity.offset + entity.length:].strip()
            break

    try:
        if mention_text:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
            draft_id = add_draft(
                db_path=context.bot_data["drafts_db_path"],
                creator_id=user_id,
                chat_id=chat_id,
                status="AWAIT_DATE",
                description=mention_text
            )

            if not draft_id:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
                return ConversationHandler.END

            context.user_data.update({
                "draft_id": draft_id,
                "description": mention_text,
                "chat_id": chat_id
            })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã
            keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]]
            sent_message = await update.message.reply_text(
                f"üì¢ {mention_text}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=InlineKeyboardMarkup(keyboard))

            context.user_data["bot_message_id"] = sent_message.message_id

            try:
                await update.message.delete()
            except BadRequest:
                pass

            return SET_DATE
        else:
            keyboard = [
                [InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_event")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_events")]
            ]
            sent_message = await update.message.reply_text(
                "–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –º–µ–Ω—è! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(keyboard))

            context.user_data["bot_message_id"] = sent_message.message_id

            try:
                await update.message.delete()
            except BadRequest:
                pass

            return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in mention handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

# ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
conv_handler_create_mention = ConversationHandler(
    entry_points=[MessageHandler(filters.Entity("mention") & filters.TEXT, mention_handler)],
    states={
        SET_DATE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_date),
            CallbackQueryHandler(cancel_input, pattern="^cancel_input$"),
        ],
        # –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    },
    fallbacks=[CallbackQueryHandler(cancel_input, pattern="^cancel_input$")],
    per_message=False,
)