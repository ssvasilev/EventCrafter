import sqlite3
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.database.db_draft_operations import add_draft, update_draft
from src.database.db_operations import get_event, get_user_templates
from src.logger import logger


async def handle_my_templates(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        templates = get_user_templates(context.bot_data["db_path"], query.from_user.id)

        if not templates:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã: {templates}")

        keyboard = [
            [InlineKeyboardButton(
                f"{t['name']} ({t['time']})",
                callback_data=f"use_template|{t['id']}"
            )]
            for t in templates[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ]

        if len(templates) > 5:
            keyboard.append([InlineKeyboardButton(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë...",
                callback_data="more_templates|5"
            )])

        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_templates")])

        await query.edit_message_text(
            "üìÅ –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}", exc_info=True)
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)


async def handle_save_template(query, context, event_id):
    try:
        event = get_event(context.bot_data["db_path"], event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if query.from_user.id != event["creator_id"]:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —à–∞–±–ª–æ–Ω—ã", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """INSERT INTO event_templates 
                (user_id, name, description, date, time, participant_limit, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)""",
                (query.from_user.id,
                 f"{event['description'][:30]}...",  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                 event['description'],
                 event['date'],
                 event['time'],
                 event['participant_limit'],
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()

        await query.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=True)

async def handle_use_template(query, context, template_id):
    """–°–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute(
                "SELECT * FROM event_templates WHERE id = ? AND user_id = ?",
                (template_id, query.from_user.id)
            )
            template = cursor.fetchone()

        if not template:
            await query.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –±–µ–∑ bot_message_id
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status="AWAIT_DATE",
            description=template['description'],
            time=template['time'],
            participant_limit=template['participant_limit'],
            is_from_template=True
        )

        if not draft_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º draft_id
        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft_id}")]]

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                text=f"üîÑ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω:\n\n"
                     f"üì¢ {template['description']}\n"
                     f"üïí –í—Ä–µ–º—è: {template['time']}\n"
                     f"üë• –õ–∏–º–∏—Ç: {template['participant_limit'] or '–Ω–µ—Ç'}\n\n"
                     f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è
            update_draft(
                db_path=context.bot_data["drafts_db_path"],
                draft_id=draft_id,
                bot_message_id=query.message.message_id
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"üîÑ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω:\n\n"
                     f"üì¢ {template['description']}\n"
                     f"üïí –í—Ä–µ–º—è: {template['time']}\n"
                     f"üë• –õ–∏–º–∏—Ç: {template['participant_limit'] or '–Ω–µ—Ç'}\n\n"
                     f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            update_draft(
                db_path=context.bot_data["drafts_db_path"],
                draft_id=draft_id,
                #bot_message_id=message.message_id
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=True)

async def save_user_middleware(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user:
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """INSERT OR REPLACE INTO users 
                (id, first_name, last_name, username, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (user.id,
                 user.first_name,
                 user.last_name or "",
                 user.username or "",
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()