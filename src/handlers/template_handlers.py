import sqlite3
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.database.db_operations import get_event, get_user_templates
from src.logger import logger


async def handle_my_templates(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        templates = get_user_templates(context.bot_data["db_path"], query.from_user.id)

        if not templates:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã: {templates}")

        keyboard = [
            [InlineKeyboardButton(
                f"{t['name']} ({t['time']})",
                callback_data=f"use_template|{t['id']}"
            )]
            for t in templates[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ]

        if len(templates) > 5:
            keyboard.append([InlineKeyboardButton(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë...",
                callback_data="more_templates|5"
            )])

        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_templates")])

        await query.edit_message_text(
            "üìÅ –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}", exc_info=True)
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)


async def save_as_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    event_id = int(query.data.split('|')[1])

    event = get_event(context.bot_data["db_path"], event_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    with sqlite3.connect(context.bot_data["db_path"]) as conn:
        cursor = conn.cursor()
        cursor.execute(
            """INSERT INTO event_templates 
            (user_id, name, description, time, participant_limit, created_at)
            VALUES (?, ?, ?, ?, ?, ?)""",
            (query.from_user.id,
             f"–®–∞–±–ª–æ–Ω {datetime.now().strftime('%d.%m')}",
             event['description'],
             event['time'],
             event['participant_limit'],
             datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )

    await query.answer("–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", show_alert=True)

async def show_templates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect(context.bot_data["db_path"]) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, name FROM event_templates WHERE user_id = ?",
            (update.effective_user.id,)
        )
        templates = cursor.fetchall()

    keyboard = [
        [InlineKeyboardButton(t[1], callback_data=f"use_template|{t[0]}")]
        for t in templates
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await update.message.reply_text(
        "–í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def use_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    template_id = int(query.data.split('|')[1])

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –ë–î
    with sqlite3.connect(context.bot_data["db_path"]) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT * FROM event_templates WHERE id = ? AND user_id = ?",
            (template_id, query.from_user.id)
        )
        template = cursor.fetchone()

    # –°–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    context.user_data['draft'] = {
        'description': template['description'],
        'time': template['time'],
        'limit': template['participant_limit']
    }

    await query.edit_message_text(
        f"–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω!\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {template['description']}\n"
        f"–í—Ä–µ–º—è: {template['time']}\n–õ–∏–º–∏—Ç: {template['participant_limit'] or '–Ω–µ—Ç'}"
    )

async def save_user_middleware(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user:
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """INSERT OR REPLACE INTO users 
                (id, first_name, last_name, username, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (user.id,
                 user.first_name,
                 user.last_name or "",
                 user.username or "",
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()