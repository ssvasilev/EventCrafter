import sqlite3
from datetime import datetime

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.database.db_draft_operations import add_draft, update_draft
from src.database.db_operations import get_event, get_user_templates
from src.logger import logger


async def handle_my_templates(query, context, offset=0, limit=5):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        templates = get_user_templates(context.bot_data["db_path"], query.from_user.id)

        if not templates:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤", show_alert=False)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            if "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" in query.message.text:
                return  # –£–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

            keyboard = [
                [InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="menu_create_event")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="menu_my_events")],
                [InlineKeyboardButton("üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="menu_my_templates")]
            ]

            try:
                await query.edit_message_text(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except telegram.error.BadRequest as e:
                if "not modified" in str(e):
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    pass
                else:
                    raise
            return

        total_templates = len(templates)
        max_pages = (total_templates + limit - 1) // limit
        current_page = offset // limit + 1

        page_templates = templates[offset:offset+limit]

        keyboard = []
        for t in page_templates:
            keyboard.append([
                InlineKeyboardButton(
                    f"{t['name']} ({t['time']})",
                    callback_data=f"use_template|{t['id']}"
                ),
                InlineKeyboardButton(
                    "üóëÔ∏è",
                    callback_data=f"delete_template|{t['id']}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if str(query.from_user.id) == str(context.user_data.get('template_owner_id', query.from_user.id)):
            pagination_buttons = []
            if offset > 0:
                pagination_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"templates_page|{offset-limit}")
                )

            pagination_buttons.append(
                InlineKeyboardButton(f"{current_page}/{max_pages}", callback_data="noop")
            )

            if offset + limit < total_templates:
                pagination_buttons.append(
                    InlineKeyboardButton("‚û°Ô∏è", callback_data=f"templates_page|{offset+limit}")
                )

            if pagination_buttons:
                keyboard.append(pagination_buttons)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        context.user_data['template_owner_id'] = query.from_user.id

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        keyboard.append([
            InlineKeyboardButton(
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data=f"close_templates|{query.from_user.id}"  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            )
        ])

        await query.edit_message_text(
            "üìÅ –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}", exc_info=True)
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤", show_alert=False)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="menu_create_event")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="menu_my_events")],
            [InlineKeyboardButton("üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="menu_my_templates")]
        ]

        try:
            await query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except telegram.error.BadRequest as e:
            if "not modified" in str(e):
                pass  # –£–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            else:
                raise

async def handle_save_template(query, context, event_id):
    try:
        event = get_event(context.bot_data["db_path"], event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
            return

        if query.from_user.id != event["creator_id"]:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —à–∞–±–ª–æ–Ω—ã", show_alert=False)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """INSERT INTO event_templates 
                (user_id, name, description, date, time, participant_limit, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)""",
                (query.from_user.id,
                 f"{event['description'][:30]}...",  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                 event['description'],
                 event['date'],
                 event['time'],
                 event['participant_limit'],
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()

        await query.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=False)

async def handle_use_template(query, context, template_id):
    """–°–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute(
                "SELECT * FROM event_templates WHERE id = ? AND user_id = ?",
                (template_id, query.from_user.id)
            )
            template = cursor.fetchone()

        if not template:
            await query.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
            return

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –°–†–ê–ó–£ —Å bot_message_id
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status="AWAIT_DATE",
            description=template['description'],
            time=template['time'],
            participant_limit=template['participant_limit'],
            is_from_template=True,
            bot_message_id=query.message.message_id,  # <-- –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ä–∞–∑—É!
            original_message_id=query.message.message_id
        )

        if not draft_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_draft|{draft_id}")]]

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                text=f"üîÑ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω:\n\n"
                     f"üì¢ {template['description']}\n"
                     f"üïí –í—Ä–µ–º—è: {template['time']}\n"
                     f"üë• –õ–∏–º–∏—Ç: {template['participant_limit'] or '–Ω–µ—Ç'}\n\n"
                     f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"üîÑ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω:\n\n"
                     f"üì¢ {template['description']}\n"
                     f"üïí –í—Ä–µ–º—è: {template['time']}\n"
                     f"üë• –õ–∏–º–∏—Ç: {template['participant_limit'] or '–Ω–µ—Ç'}\n\n"
                     f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            update_draft(
                db_path=context.bot_data["drafts_db_path"],
                draft_id=draft_id,
                bot_message_id=message.message_id  # <-- –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ!
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=False)

async def handle_delete_template(query, context, template_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        templates = get_user_templates(context.bot_data["db_path"], query.from_user.id)
        if not any(t['id'] == template_id for t in templates):
            await query.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=False)
            return

        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM event_templates WHERE id = ?", (template_id,))
            conn.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await query.answer("‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω", show_alert=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        await handle_my_templates(query, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=False)

async def save_user_middleware(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user:
        with sqlite3.connect(context.bot_data["db_path"]) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """INSERT OR REPLACE INTO users 
                (id, first_name, last_name, username, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (user.id,
                 user.first_name,
                 user.last_name or "",
                 user.username or "",
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()