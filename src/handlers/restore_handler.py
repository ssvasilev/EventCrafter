from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, filters
from src.database.db_draft_operations import get_user_state, get_draft, clear_user_state, get_db_connection, \
    get_active_user_state
from src.handlers.conversation_handler_states import *

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.database.db_draft_operations import get_draft, clear_user_state
from src.handlers.conversation_handler_states import *
from src.logger.logger import logger

async def restore_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message or not update.message.text or update.message.text.startswith('/'):
            return None

        user_id = update.message.from_user.id
        db_path = context.bot_data["drafts_db_path"]

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = get_active_user_state(db_path, user_id)
        if not user_state:
            return None

        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft = get_draft(db_path, user_state["draft_id"])
        if not draft:
            clear_user_state(db_path, user_id)
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        draft = dict(draft) if hasattr(draft, 'keys') else draft

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.update({
            "draft_id": draft["id"],
            "description": draft.get("description"),
            "date": draft.get("date"),
            "time": draft.get("time"),
            "restored": True  # –§–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        })

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        message_text = get_restored_message_text(draft, user_state["state"])
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=message_text,
                reply_markup=reply_markup
            )
            context.user_data["bot_message_id"] = message.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await redirect_to_state_handler(update, context, user_state["handler"], user_state["state"])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        if 'db_path' in locals() and 'user_id' in locals():
            clear_user_state(db_path, user_id)
        return None





def get_restored_message_text(draft, state):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    base_text = f"üì¢ {draft.get('description', '')}\n\n" if draft.get('description') else ""

    if state == SET_DESCRIPTION:
        return f"{base_text}–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
    elif state == SET_DATE:
        return f"{base_text}–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):"
    elif state == SET_TIME:
        return f"{base_text}üìÖ –î–∞—Ç–∞: {draft.get('date', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):"
    elif state == SET_LIMIT:
        return f"{base_text}üìÖ –î–∞—Ç–∞: {draft.get('date', '')}\n\nüïí –í—Ä–µ–º—è: {draft.get('time', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
    return "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"


async def redirect_to_state_handler(update, context, handler_name, state):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        if handler_name == "create_event_handler":
            if state == SET_DESCRIPTION:
                from src.event.create.set_description import set_description
                return await set_description(update, context)
            elif state == SET_DATE:
                from src.event.create.set_date import set_date
                return await set_date(update, context)
            elif state == SET_TIME:
                from src.event.create.set_time import set_time
                return await set_time(update, context)
            elif state == SET_LIMIT:
                from src.event.create.set_limit import set_limit
                return await set_limit(update, context)

        elif handler_name == "mention_handler":
            if state == SET_DATE:
                from src.event.create.set_date import set_date
                return await set_date(update, context)
            elif state == SET_TIME:
                from src.event.create.set_time import set_time
                return await set_time(update, context)
            elif state == SET_LIMIT:
                from src.event.create.set_limit import set_limit
                return await set_limit(update, context)

        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return None


# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞
def get_restore_handler():
    return MessageHandler(filters.TEXT & ~filters.COMMAND, restore_handler)