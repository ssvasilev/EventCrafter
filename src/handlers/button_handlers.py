from telegram import Update
from telegram.ext import ContextTypes
from src.database.db_operations import (
    add_participant,
    remove_participant,
    add_to_declined,
    remove_from_reserve,
    get_event,
    remove_from_declined,
    is_user_in_participants,
    is_user_in_reserve,
    get_participants_count,
    add_to_reserve,
    get_reserve,
    is_user_in_declined,
)
from src.message.send_message import send_event_message
from src.logger.logger import logger


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –∏ "–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()  # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query

        if not query or not query.data:
            logger.warning("–ü—É—Å—Ç–æ–π callback_query –∏–ª–∏ callback_data")
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if "|" not in query.data:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            return

        action, event_id = query.data.split("|", 1)
        user = query.from_user
        user_id = user.id
        user_name = f"{user.first_name} (@{user.username})" if user.username else f"{user.first_name} (ID: {user.id})"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            await query.edit_message_text("‚ö† –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if action == "join":
            await handle_join_action(db_path, event, user_id, user_name, query, context)
        elif action == "leave":
            await handle_leave_action(db_path, event, user_id, user_name, query, context)
        elif action == "edit":
            await handle_edit_action(event, query, context)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            await query.edit_message_text("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        await update_event_message(event_id, query, context)

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {e}")
        await query.edit_message_text("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ button_handler: {e}")
        if 'query' in locals():
            await query.edit_message_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

async def handle_join_action(db_path, event, user_id, user_name, query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    event_id = event["id"]

    if is_user_in_declined(db_path, event_id, user_id):
        remove_from_declined(db_path, event_id, user_id)

    if is_user_in_participants(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    if is_user_in_reserve(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –≤ —Ä–µ–∑–µ—Ä–≤–µ")
        return

    if event["participant_limit"] is None or get_participants_count(db_path, event_id) < event["participant_limit"]:
        add_participant(db_path, event_id, user_id, user_name)
        await query.answer(f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
    else:
        add_to_reserve(db_path, event_id, user_id, user_name)
        await query.answer("‚è≥ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤")

async def handle_leave_action(db_path, event, user_id, user_name, query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    event_id = event["id"]
    chat_id = event["chat_id"]

    if is_user_in_participants(db_path, event_id, user_id):
        remove_participant(db_path, event_id, user_id)
        add_to_declined(db_path, event_id, user_id, user_name)

        reserve = get_reserve(db_path, event_id)
        if reserve:
            new_participant = reserve[0]
            remove_from_reserve(db_path, event_id, new_participant["user_id"])
            add_participant(db_path, event_id, new_participant["user_id"], new_participant["user_name"])

            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üëã {user_name} –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç\n"
                     f"üéâ {new_participant['user_name']} –ø–µ—Ä–µ–º–µ—â—ë–Ω(–∞) –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞"
            )
            await query.answer("‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ (—Ä–µ–∑–µ—Ä–≤ –ø–µ—Ä–µ–º–µ—â—ë–Ω)")
        else:
            await query.answer("‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ")

    elif is_user_in_reserve(db_path, event_id, user_id):
        remove_from_reserve(db_path, event_id, user_id)
        add_to_declined(db_path, event_id, user_id, user_name)
        await query.answer("‚ùå –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞")

    elif is_user_in_declined(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å")
    else:
        add_to_declined(db_path, event_id, user_id, user_name)
        await query.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è")

async def handle_edit_action(event, query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.answer("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def update_event_message(event_id, query, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    try:
        await send_event_message(
            event_id,
            context,
            query.message.chat_id,
            query.message.message_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")