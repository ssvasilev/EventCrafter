from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from src.database.db_operations import (
    add_participant,
    remove_participant,
    add_to_declined,
    remove_from_reserve,
    get_event,
    remove_from_declined,
    is_user_in_participants,
    is_user_in_reserve,
    get_participants_count,
    add_to_reserve,
    get_reserve,
    is_user_in_declined,
)
from src.message.send_message import send_event_message
from src.logger.logger import logger

async def handle_reserve_promotion(db_path, event_id, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏."""
    reserve = get_reserve(db_path, event_id)
    if not reserve:
        return None

    new_participant = reserve[0]
    remove_from_reserve(db_path, event_id, new_participant["user_id"])
    add_participant(db_path, event_id, new_participant["user_id"], new_participant["user_name"])
    return new_participant

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –∏ "–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏

    try:
        user = query.from_user
        data = query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data
        if "|" not in data:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {data}")
            return

        action, event_id = data.split("|")
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        user_id = user.id
        user_name = f"{user.first_name} (@{user.username})" if user.username else f"{user.first_name} (ID: {user.id})"
        chat_id = event["chat_id"]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        if action == "join":
            await handle_join_action(db_path, event, user_id, user_name, query, context)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        elif action == "leave":
            await handle_leave_action(db_path, event, user_id, user_name, query, context)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        await send_event_message(event_id, context, query.message.chat_id, query.message.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def handle_join_action(db_path, event, user_id, user_name, query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'."""
    event_id = event["event_id"]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–µ
    if is_user_in_participants(db_path, event_id, user_id) or is_user_in_reserve(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if is_user_in_declined(db_path, event_id, user_id):
        remove_from_declined(db_path, event_id, user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç
    if event["participant_limit"] is None or get_participants_count(db_path, event_id) < event["participant_limit"]:
        add_participant(db_path, event_id, user_id, user_name)
        await query.answer(f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
    else:
        add_to_reserve(db_path, event_id, user_id, user_name)
        await query.answer(f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤.")

async def handle_leave_action(db_path, event, user_id, user_name, query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'."""
    event_id = event["event_id"]
    chat_id = event["chat_id"]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    if is_user_in_participants(db_path, event_id, user_id):
        remove_participant(db_path, event_id, user_id)
        add_to_declined(db_path, event_id, user_id, user_name)

        new_participant = await handle_reserve_promotion(db_path, event_id, context)
        if new_participant:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üëã {user_name} –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç.\n"
                     f"üéâ {new_participant['user_name']} –ø–µ—Ä–µ–º–µ—â—ë–Ω(–∞) –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏!",
            )
            await query.answer(f"–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. {new_participant['user_name']} —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç.")
        else:
            await query.answer("–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∑–µ—Ä–≤–µ
    elif is_user_in_reserve(db_path, event_id, user_id):
        remove_from_reserve(db_path, event_id, user_id)
        add_to_declined(db_path, event_id, user_id, user_name)
        await query.answer("–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è
    elif is_user_in_declined(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–∞—Ö
    else:
        add_to_declined(db_path, event_id, user_id, user_name)
        await query.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è.")

def register_button_handler(application):
    application.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(join|leave)\|"))