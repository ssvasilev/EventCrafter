from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from src.database.db_operations import (
    get_event,
    add_participant,
    remove_participant,
    add_to_declined,
    remove_from_reserve,
    is_user_in_participants,
    is_user_in_reserve,
    get_participants_count,
    add_to_reserve,
    get_reserve,
    is_user_in_declined,
    remove_from_declined
)
from src.message.send_message import send_event_message

from src.logger.logger import logger
from src.utils.utils import format_user_name


async def handle_join_action(db_path, event, user_id, user_name, query):
    logger.debug(f"Event structure: {event}")
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    try:
        event_id = event["id"]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å event["event_id"] –Ω–∞ event["id"]

        if is_user_in_participants(db_path, event_id, user_id):
            await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return False

        if is_user_in_reserve(db_path, event_id, user_id):
            await query.answer("–í—ã —É–∂–µ –≤ —Ä–µ–∑–µ—Ä–≤–µ!")
            return False

        if is_user_in_declined(db_path, event_id, user_id):
            remove_from_declined(db_path, event_id, user_id)

        participant_limit = event.get("participant_limit")
        if participant_limit is None or get_participants_count(db_path, event_id) < participant_limit:
            add_participant(db_path, event_id, user_id, user_name)
            await query.answer("‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!")
            return True
        else:
            add_to_reserve(db_path, event_id, user_id, user_name)
            await query.answer("‚è≥ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤")
            return True
    except Exception as e:
        logger.error(f"Join action error: {e}")
        await query.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return False

async def handle_leave_action(db_path, event, user_id, user_name, query, context):
    logger.debug(f"Event structure: {event}")
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    try:
        event_id = event["id"]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å event["event_id"] –Ω–∞ event["id"]
        chat_id = event["chat_id"]
        changed = False

        if is_user_in_participants(db_path, event_id, user_id):
            remove_participant(db_path, event_id, user_id)
            add_to_declined(db_path, event_id, user_id, user_name)
            changed = True

            reserve = get_reserve(db_path, event_id)
            if reserve:
                new_participant = reserve[0]
                remove_from_reserve(db_path, event_id, new_participant["user_id"])
                add_participant(db_path, event_id, new_participant["user_id"], new_participant["user_name"])

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üéâ {new_participant['user_name']} –ø–µ—Ä–µ–º–µ—â—ë–Ω(–∞) –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏!"
                )
                await query.answer(f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. {new_participant['user_name']} —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç!")
                return True

        elif is_user_in_reserve(db_path, event_id, user_id):
            remove_from_reserve(db_path, event_id, user_id)
            add_to_declined(db_path, event_id, user_id, user_name)
            changed = True
        elif is_user_in_declined(db_path, event_id, user_id):
            await query.answer("–í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è")
            return False
        else:
            add_to_declined(db_path, event_id, user_id, user_name)
            changed = True

        if changed:
            await query.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è")
            return True
        return False
    except Exception as e:
        logger.error(f"Leave action error: {e}")
        await query.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return False

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        if not query.data or "|" not in query.data:
            logger.error(f"Invalid callback data: {query.data}")
            return

        action, event_id_str = query.data.split("|", 1)

        try:
            event_id = int(event_id_str)
        except ValueError:
            logger.error(f"Invalid event ID format: {event_id_str}")
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            return

        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            logger.error(f"Event not found: {event_id}")
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã event
        if "id" not in event or "chat_id" not in event:
            logger.error(f"Invalid event structure: {event}")
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            return

        user = query.from_user
        user_id = user.id
        user_name = format_user_name(user) #—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É

        if user.username:
            user_name += f" (@{user.username})"

        if action == "join":
            await handle_join_action(db_path, event, user_id, user_name, query)
        elif action == "leave":
            await handle_leave_action(db_path, event, user_id, user_name, query, context)
        elif action == "edit":
            await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            return
        else:
            logger.warning(f"Unknown event action: {action}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        await send_event_message(event_id, context, query.message.chat_id, query.message.message_id)

    except Exception as e:
        logger.error(f"Event button handler error: {e}", exc_info=True)
        await query.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def register_button_handler(application):
    application.add_handler(
        CallbackQueryHandler(
            button_handler,
            pattern=r"^(join|leave|edit)\|"
        )
    )