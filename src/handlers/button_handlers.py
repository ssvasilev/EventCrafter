import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import ContextTypes, CallbackQueryHandler
from src.database.db_operations import (
    get_event,
    add_participant,
    remove_participant,
    add_to_declined,
    remove_from_reserve,
    remove_from_declined,
    is_user_in_participants,
    is_user_in_reserve,
    get_participants_count,
    add_to_reserve,
    get_reserve,
    is_user_in_declined,
    update_event_field, delete_event, get_participants
)
from src.database.db_draft_operations import add_draft, delete_draft, get_draft
from src.handlers.menu import show_main_menu
from src.handlers.template_handlers import handle_save_template, handle_use_template, handle_delete_template, \
    handle_my_templates
from src.jobs.notification_jobs import remove_existing_notification_jobs
from src.message.send_message import send_event_message
from src.logger.logger import logger

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    #await query.answer()

    try:
        if not '|' in query.data:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö callback_data –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            if query.data == "close_templates":
                keyboard = [
                    [InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="menu_create_event")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="menu_my_events")],
                    [InlineKeyboardButton("üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="menu_my_templates")]
                ]
                await query.edit_message_text(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif query.data == "noop":
                await query.answer()
                return
            return
        parts = query.data.split('|')
        action = parts[0]

        if action == 'templates_page':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–∞–∂–∏–º–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü —à–∞–±–ª–æ–Ω–æ–≤
            if str(query.from_user.id) != str(context.user_data.get('template_owner_id')):
                await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ª–∏—Å—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=False)
                return

            if parts[1] != 'current':
                offset = int(parts[1])
                await handle_my_templates(query, context, offset)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |
        parts = query.data.split('|')
        action = parts[0]

        if action == 'close_templates':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü —à–∞–±–ª–æ–Ω–æ–≤
            if len(parts) > 1 and int(parts[1]) != query.from_user.id:
                await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —à–∞–±–ª–æ–Ω–æ–≤ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é", show_alert=False)
                return

            keyboard = [
                [InlineKeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="menu_create_event")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="menu_my_events")],
                [InlineKeyboardButton("üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="menu_my_templates")]
            ]
            await query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        elif action == 'join':
            await handle_join(query, context, int(parts[1]))
        elif action == 'leave':
            await handle_leave(query, context, int(parts[1]))
        elif action == 'edit':
            await handle_edit_event(query, context, int(parts[1]))
        elif action == 'edit_field':
            await handle_edit_field(query, context, int(parts[1]), parts[2])
        elif action == 'save_template':
            event_id = int(parts[1])
            await handle_save_template(query, context, event_id)
        elif action == 'use_template':
            template_id = int(parts[1])
            await handle_use_template(query, context, template_id)
        elif action == 'delete_template':
            template_id = int(parts[1])
            await handle_delete_template(query, context, template_id)
        elif action == 'confirm_delete':
            await handle_confirm_delete(query, context, int(parts[1]))
        elif action == 'delete_event':
            await handle_delete_event(query, context, int(parts[1]))
        elif action == 'cancel_delete':
            await handle_cancel_delete(query, context, int(parts[1]))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_join(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    user = query.from_user
    db_path = context.bot_data["db_path"]
    event = get_event(db_path, event_id)

    if not event:
        await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_id = user.id
    user_name = f"{user.first_name} (@{user.username})" if user.username else f"{user.first_name} (ID: {user.id})"

    if is_user_in_declined(db_path, event_id, user_id):
        remove_from_declined(db_path, event_id, user_id)

    if is_user_in_participants(db_path, event_id, user_id) or is_user_in_reserve(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–∞.")
        return

    if event["participant_limit"] is None or get_participants_count(db_path, event_id) < event["participant_limit"]:
        add_participant(db_path, event_id, user_id, user_name)
        await query.answer(f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
    else:
        add_to_reserve(db_path, event_id, user_id, user_name)
        await query.answer(f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤.")

    await update_event_message(context, event_id, query.message)


async def handle_leave(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    user = query.from_user
    db_path = context.bot_data["db_path"]
    event = get_event(db_path, event_id)

    if not event:
        await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_id = user.id
    user_name = f"{user.first_name} (@{user.username})" if user.username else f"{user.first_name} (ID: {user.id})"

    if is_user_in_participants(db_path, event_id, user_id):
        remove_participant(db_path, event_id, user_id)
        add_to_declined(db_path, event_id, user_id, user_name)

        reserve = get_reserve(db_path, event_id)
        if reserve:
            new_participant = reserve[0]
            remove_from_reserve(db_path, event_id, new_participant["user_id"])
            add_participant(db_path, event_id, new_participant["user_id"], new_participant["user_name"])

            await context.bot.send_message(
                chat_id=event["chat_id"],
                text=f"üëã {user_name} –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.\n"
                     f"üéâ {new_participant['user_name']} –±—ã–ª(–∞) –ø–µ—Ä–µ–º–µ—â—ë–Ω(–∞) –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
            )

            await query.answer(
                f"{user_name}, –≤—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è. "
                f"{new_participant['user_name']} –ø–µ—Ä–µ–º–µ—â—ë–Ω(–∞) –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏."
            )
        else:
            await query.answer(f"{user_name}, –≤—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è.")

    elif is_user_in_reserve(db_path, event_id, user_id):
        remove_from_reserve(db_path, event_id, user_id)
        add_to_declined(db_path, event_id, user_id, user_name)
        await query.answer(f"{user_name}, –≤—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è.")

    elif is_user_in_declined(db_path, event_id, user_id):
        await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è.")
        return

    else:
        add_to_declined(db_path, event_id, user_id, user_name)
        await query.answer(f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö—Å—è.")

    await update_event_message(context, event_id, query.message)

# –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def handle_edit_event(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    event = get_event(context.bot_data["db_path"], event_id)

    if not event:
        await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º
    if query.from_user.id != event["creator_id"]:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=False)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
    keyboard = [
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        [
            InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field|{event_id}|description"),
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_field|{event_id}|date"),
            InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_field|{event_id}|time"),
            InlineKeyboardButton("üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"edit_field|{event_id}|limit")

        ],
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ª–∏–º–∏—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—è
        [
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", callback_data=f"save_template|{event_id}")
        ],
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –æ–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        [
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"confirm_delete|{event_id}"),
            InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit|{event_id}")
        ]
    ]

    await query.edit_message_text(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_edit_field(query, context, event_id, field):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = get_event(context.bot_data["db_path"], event_id)
        if not event:
            logger.error(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
        if query.from_user.id != event["creator_id"]:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–æ–º: user={query.from_user.id}, creator={event['creator_id']}")
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=False)
            return

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=f"EDIT_{field}",
            event_id=event_id,
            original_message_id=query.message.message_id,
            bot_message_id=query.message.message_id,
            description=event["description"],
            date=event["date"],
            time=event["time"],
            participant_limit=event["participant_limit"],
            is_from_template=False
        )

        if not draft_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞")
            return

        logger.info(f"–°–æ–∑–¥–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ID {draft_id} –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        field_prompts = {
            "description": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            "date": "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
            "time": "üïí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
            "limit": "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):"
        }

        keyboard = [
            [InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_input|{draft_id}")]
        ]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º draft_id –≤ context.user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data['current_draft_id'] = draft_id

        try:
            await query.edit_message_text(
                text=field_prompts[field],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            await query.answer()  # –í–∞–∂–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –§–æ–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=field_prompts[field],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_edit_field: {e}", exc_info=True)
        try:
            await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except:
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", show_alert=False)

async def handle_cancel_edit(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    event = get_event(context.bot_data["db_path"], event_id)

    if not event:
        await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤—É—é", callback_data=f"join|{event_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é", callback_data=f"leave|{event_id}")],
        [InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{event_id}")]
    ]

    message_text = f"üì¢ {event['description']}\n\n–î–∞—Ç–∞: {event['date']}\n–í—Ä–µ–º—è: {event['time']}\n–õ–∏–º–∏—Ç: {event['participant_limit'] or '‚àû'}"

    await query.edit_message_text(
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_cancel_input(query, context, draft_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        draft = get_draft(context.bot_data["drafts_db_path"], draft_id)
        if draft:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
            if draft.get("event_id"):  # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                event = get_event(context.bot_data["db_path"], draft["event_id"])
                if event:
                    await send_event_message(
                        event_id=event["id"],
                        context=context,
                        chat_id=query.message.chat_id,
                        message_id=query.message.message_id  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    )
            else:  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                await query.edit_message_text(
                    text="–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=None
                )

            delete_draft(context.bot_data["drafts_db_path"], draft_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–≤–æ–¥–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")

async def update_event_message(context, event_id, message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    try:
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)
        if not event:
            logger.error(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        max_retries = 3
        for attempt in range(max_retries):
            try:
                await send_event_message(
                    event_id=event_id,
                    context=context,
                    chat_id=message.chat_id,
                    message_id=event.get("message_id")
                )
                break
            except Exception as e:
                if attempt == max_retries - 1:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def handle_confirm_delete(query, context, event_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞"""
    try:
        event = get_event(context.bot_data["db_path"], event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
        if query.from_user.id != event["creator_id"]:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=False)
            return

        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event|{event_id}")],
            [InlineKeyboardButton("‚õî –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_delete|{event_id}")]
        ]

        await query.edit_message_text(
            text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=False)


async def handle_delete_event(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É –≤ –õ–°"""
    try:
        event = get_event(context.bot_data["db_path"], event_id)

        if not event:
            await query.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
            return

        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if query.from_user.id != event["creator_id"]:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=False)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        creator = query.from_user
        creator_name = f"{creator.first_name}"
        if creator.username:
            creator_name += f" (@{creator.username})"
        else:
            creator_name += f" (ID: {creator.id})"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        try:
            chat = await context.bot.get_chat(event["chat_id"])
            chat_name = chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {e}")
            chat_name = "—á–∞—Ç"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        message_link = ""
        try:
            if str(event["chat_id"]).startswith("-100"):  # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
                chat_id_for_link = str(event["chat_id"])[4:]
                message_link = f"\n\nüîó –°—Å—ã–ª–∫–∞: https://t.me/c/{chat_id_for_link}/{event['message_id']}"
            elif str(event["chat_id"]).startswith("-"):  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
                chat_id_for_link = str(abs(int(event["chat_id"])))
                message_link = f"\n\nüîó –°—Å—ã–ª–∫–∞: https://t.me/c/{chat_id_for_link}/{event['message_id']}"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        remove_existing_notification_jobs(event_id, context)

        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        delete_event(context.bot_data["db_path"], event_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–∑ —á–∞—Ç–∞
        try:
            await context.bot.delete_message(
                chat_id=event["chat_id"],
                message_id=event["message_id"]
            )
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•
        try:
            await context.bot.send_message(
                chat_id=creator.id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° –∞–≤—Ç–æ—Ä—É
                text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
                     f"üì¢ {event['description']}\n"
                     f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
                     f"üïí –í—Ä–µ–º—è: {event['time']}\n"
                     f"üí¨ –ß–∞—Ç: {chat_name}"
                     f"{message_link}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É {creator.id}: {e}")
            # –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ –õ–°
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°)"
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = get_participants(context.bot_data["db_path"], event_id)
        for participant in participants:
            # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if participant["user_id"] != creator.id:
                try:
                    await context.bot.send_message(
                        chat_id=participant["user_id"],
                        text=f"üö´ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                             f"üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {event['description']}\n"
                             f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
                             f"üïí –í—Ä–µ–º—è: {event['time']}\n"
                             f"üë§ –ê–≤—Ç–æ—Ä: {creator_name}\n"
                             f"üí¨ –ß–∞—Ç: {chat_name}"
                             f"{message_link}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant['user_id']}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {creator_name} —É–¥–∞–ª–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=False)


async def handle_cancel_delete(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞"""
    try:
        event = get_event(context.bot_data["db_path"], event_id)
        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        if query.from_user.id != event["creator_id"]:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=False)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        await send_event_message(
            event_id=event_id,
            context=context,
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=False)

def register_button_handler(application):
    application.add_handler(CallbackQueryHandler(
        button_handler,
        pattern=r"^(join|leave|edit|edit_field|confirm_delete|delete_event|cancel_delete|save_template|use_template|delete_template|close_templates)"
    ))