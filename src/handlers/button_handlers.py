from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from src.database.db_draft_operations import add_draft
from src.database.db_operations import (
    get_event,
    add_participant,
    remove_participant,
    add_to_declined,
    remove_from_reserve,
    is_user_in_participants,
    is_user_in_reserve,
    get_participants_count,
    add_to_reserve,
    get_reserve,
    is_user_in_declined,
    remove_from_declined
)
from src.message.send_message import send_event_message

from src.logger.logger import logger
from src.utils.user_naming import UserNamingService



async def handle_join_action(db_path, event, user_id, user_name, query):
    logger.debug(f"Event structure: {event}")
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    display_name = UserNamingService.get_display_name(query.from_user)
    try:
        event_id = event["id"]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å event["event_id"] –Ω–∞ event["id"]

        if is_user_in_participants(db_path, event_id, user_id):
            await query.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return False

        if is_user_in_reserve(db_path, event_id, user_id):
            await query.answer("–í—ã —É–∂–µ –≤ —Ä–µ–∑–µ—Ä–≤–µ!")
            return False

        if is_user_in_declined(db_path, event_id, user_id):
            remove_from_declined(db_path, event_id, user_id)

        participant_limit = event.get("participant_limit")
        if participant_limit is None or get_participants_count(db_path, event_id) < participant_limit:
            add_participant(db_path, event_id, user_id, user_name)
            await query.answer("‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!")
            return True
        else:
            add_to_reserve(db_path, event_id, user_id, user_name)
            await query.answer("‚è≥ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤")
            return True
    except Exception as e:
        logger.error(f"Join action error: {e}")
        await query.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return False

async def handle_leave_action(db_path, event, user_id, user_name, query, context):
    logger.debug(f"Event structure: {event}")
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'"""
    display_name = UserNamingService.get_display_name(query.from_user)
    try:
        event_id = event["id"]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å event["event_id"] –Ω–∞ event["id"]
        chat_id = event["chat_id"]
        changed = False

        if is_user_in_participants(db_path, event_id, user_id):
            remove_participant(db_path, event_id, user_id)
            add_to_declined(db_path, event_id, user_id, user_name)
            changed = True

            reserve = get_reserve(db_path, event_id)
            if reserve:
                new_participant = reserve[0]
                remove_from_reserve(db_path, event_id, new_participant["user_id"])
                add_participant(db_path, event_id, new_participant["user_id"], new_participant["user_name"])

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üéâ {new_participant['user_name']} –ø–µ—Ä–µ–º–µ—â—ë–Ω(–∞) –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏!"
                )
                await query.answer(f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. {new_participant['user_name']} —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç!")
                return True

        elif is_user_in_reserve(db_path, event_id, user_id):
            remove_from_reserve(db_path, event_id, user_id)
            add_to_declined(db_path, event_id, user_id, user_name)
            changed = True
        elif is_user_in_declined(db_path, event_id, user_id):
            await query.answer("–í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è")
            return False
        else:
            add_to_declined(db_path, event_id, user_id, user_name)
            changed = True

        if changed:
            await query.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è")
            return True
        return False
    except Exception as e:
        logger.error(f"Leave action error: {e}")
        await query.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return False

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        action, event_id = query.data.split("|")
        event_id = int(event_id)

        if action == "join":
            await handle_participation(query, context, event_id, participate=True)
        elif action == "leave":
            await handle_participation(query, context, event_id, participate=False)
        elif action == "edit":
            await handle_edit_event(query, context, event_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def handle_edit_event(query, context, event_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    event = get_event(context.bot_data["db_path"], event_id)

    if not event:
        await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field|{event_id}|description")],
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_field|{event_id}|date")],
        [InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_field|{event_id}|time")],
        [InlineKeyboardButton("üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"edit_field|{event_id}|limit")],
        [InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit|{event_id}")]
    ]

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_participation(query, context, event_id, participate):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è/–æ—Ç–∫–∞–∑–∞ –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–º–µ–Ω"""
    from src.database.db_operations import (
        get_event,
        add_participant,
        add_to_declined,
        add_to_reserve,
        remove_participant,
        remove_from_declined,
        get_participants_count
    )

    user = query.from_user
    event = get_event(context.bot_data["db_path"], event_id)

    if not event:
        await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_display_name = (
        f"{user.full_name} (@{user.username})"
        if user.username
        else f"{user.full_name} (ID: {user.id})"
    )

    if participate:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–£—á–∞—Å—Ç–≤—É—é"
        if event["participant_limit"] and get_participants_count(context.bot_data["db_path"], event_id) >= event["participant_limit"]:
            await query.answer("–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤", show_alert=True)
            add_to_reserve(context.bot_data["db_path"], event_id, user.id, user_display_name)
        else:
            remove_from_declined(context.bot_data["db_path"], event_id, user.id)
            add_participant(context.bot_data["db_path"], event_id, user.id, user_display_name)
            await query.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–ù–µ —É—á–∞—Å—Ç–≤—É—é"
        remove_participant(context.bot_data["db_path"], event_id, user.id)
        add_to_declined(context.bot_data["db_path"], event_id, user.id, user_display_name)
        await query.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await update_event_message(context, event_id, query.message)


async def update_event_message(context, event_id, message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    from src.message.send_message import send_event_message
    await send_event_message(
        event_id=event_id,
        context=context,
        chat_id=message.chat_id,
        message_id=message.message_id
    )


async def edit_field_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    _, event_id, field = query.data.split("|")
    event_id = int(event_id)
    event = get_event(context.bot_data["db_path"], event_id)

    if not event:
        await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    draft_id = add_draft(
        db_path=context.bot_data["drafts_db_path"],
        creator_id=query.from_user.id,
        chat_id=query.message.chat_id,
        status=f"EDIT_{field}",
        event_id=event_id,
        original_message_id=query.message.message_id,
        description=event["description"],
        date=event["date"],
        time=event["time"],
        participant_limit=event["participant_limit"]
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    field_prompts = {
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
        "time": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
        "limit": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):"
    }

    keyboard = [[InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_input|{draft_id}")]]
    await query.edit_message_text(
        text=field_prompts[field],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def cancel_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    _, event_id = query.data.split("|")
    event_id = int(event_id)
    event = get_event(context.bot_data["db_path"], event_id)

    if not event:
        await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤—É—é", callback_data=f"join|{event_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é", callback_data=f"leave|{event_id}")],
        [InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{event_id}")]
    ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç)
    message_text = f"üì¢ {event['description']}\n\n–î–∞—Ç–∞: {event['date']}\n–í—Ä–µ–º—è: {event['time']}\n–õ–∏–º–∏—Ç: {event['participant_limit'] or '‚àû'}"

    await query.edit_message_text(
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard))


def register_button_handler(application):
    application.add_handler(
        CallbackQueryHandler(
            button_handler,
            pattern=r"^(join|leave|edit)\|"
        )
    )
    application.add_handler(
        CallbackQueryHandler(
            edit_field_handler,
            pattern=r"^edit_field\|"
        )
    )
    application.add_handler(
        CallbackQueryHandler(
            cancel_edit_handler,
            pattern=r"^cancel_edit\|"
        )
    )