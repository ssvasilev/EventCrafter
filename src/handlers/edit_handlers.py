from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from src.database.db_operations import get_event, update_event_field
from src.database.db_draft_operations import add_draft, update_draft, delete_draft, get_draft
from src.logger import logger
from src.message.send_message import send_event_message
from src.jobs.notification_jobs import remove_existing_notification_jobs, schedule_notifications, \
    schedule_unpin_and_delete
from datetime import datetime


async def handle_edit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        event_id = int(query.data.split("|")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        user_data = context.user_data

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft_id = add_draft(
            context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status="EDIT_MODE",
            event_id=event_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ user_data
        user_data['current_draft_id'] = draft_id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await show_edit_menu(query, event_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_button: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


async def show_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query

    keyboard = [
        [
            InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc|{event_id}"),
            InlineKeyboardButton("üë• –õ–∏–º–∏—Ç", callback_data=f"edit_limit|{event_id}")
        ],
        [
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date|{event_id}"),
            InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_time|{event_id}")
        ],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"cancel_edit|{event_id}")]
    ]

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        action, event_id = query.data.split("|")
        db_path = context.bot_data["db_path"]
        drafts_db_path = context.bot_data["drafts_db_path"]
        draft_id = context.user_data.get("edit_draft_id")

        if not draft_id:
            await query.answer("–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return

        field_map = {
            "edit_desc": ("–æ–ø–∏—Å–∞–Ω–∏–µ", "description", "AWAIT_DESCRIPTION"),
            "edit_date": ("–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)", "date", "AWAIT_DATE"),
            "edit_time": ("–≤—Ä–µ–º—è (–ß–ß:–ú–ú)", "time", "AWAIT_TIME"),
            "edit_limit": ("–ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –±–µ–∑ –ª–∏–º–∏—Ç–∞)", "participant_limit", "AWAIT_LIMIT")
        }

        if action not in field_map:
            return

        field_name, field_key, status = field_map[action]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        update_draft(
            db_path=drafts_db_path,
            draft_id=draft_id,
            status=status
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ user_data
        context.user_data["edit_field"] = field_key

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_input|{draft_id}")]]
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Field selection error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è")


async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
    try:
        user_data = context.user_data
        drafts_db_path = context.bot_data["drafts_db_path"]
        db_path = context.bot_data["db_path"]

        draft_id = user_data.get("edit_draft_id")
        if not draft_id:
            return

        draft = get_draft(drafts_db_path, draft_id)
        if not draft:
            await update.message.reply_text("–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        field = user_data.get("edit_field")
        new_value = update.message.text
        event_id = draft["event_id"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if field == "date":
            try:
                datetime.strptime(new_value, "%d.%m.%Y")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return
        elif field == "time":
            try:
                datetime.strptime(new_value, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return
        elif field == "participant_limit":
            try:
                new_value = int(new_value)
                if new_value < 0:
                    raise ValueError
            except ValueError:
                await update.message.reply_text("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ 0")
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
        update_draft(
            db_path=drafts_db_path,
            draft_id=draft_id,
            **{field: new_value}
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        success = update_event_field(
            db_path,
            event_id,
            field,
            new_value
        )

        if not success:
            await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return

        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è, –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if field in ("date", "time"):
            event = get_event(db_path, event_id)
            try:
                event_datetime = datetime.strptime(
                    f"{event['date']} {event['time']}",
                    "%d.%m.%Y %H:%M"
                )
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                remove_existing_notification_jobs(event_id, context)
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await schedule_notifications(event_id, context, event_datetime, draft["chat_id"])
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è
                await schedule_unpin_and_delete(event_id, context, draft["chat_id"])
            except Exception as e:
                logger.error(f"Error updating notifications: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
        except Exception as e:
            logger.warning(f"Could not delete user message: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
        await send_event_message(
            event_id,
            context,
            draft["chat_id"],
            draft["original_message_id"]
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await show_edit_menu(update, context, event_id)

    except Exception as e:
        logger.error(f"Save edit error: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        _, event_id = query.data.split("|")
        drafts_db_path = context.bot_data["drafts_db_path"]
        draft_id = context.user_data.get("edit_draft_id")

        if draft_id:
            # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
            delete_draft(drafts_db_path, draft_id)
            context.user_data.pop("edit_draft_id", None)
            context.user_data.pop("edit_field", None)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_event_message(
            event_id,
            context,
            query.message.chat_id,
            query.message.message_id
        )

    except Exception as e:
        logger.error(f"Cancel edit error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")


def register_edit_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    application.add_handler(CallbackQueryHandler(
        handle_edit_button,
        pattern=r"^edit\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
    application.add_handler(CallbackQueryHandler(
        handle_field_selection,
        pattern=r"^edit_(desc|date|time|limit)\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(CallbackQueryHandler(
        cancel_edit,
        pattern=r"^cancel_edit\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        save_edited_field
    ))