from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler

from config import tz
from src.database.db_operations import get_event, update_event_field
from src.database.db_draft_operations import add_draft, get_draft, update_draft, delete_draft, get_user_draft, \
    get_draft_by_event_id
import logging
from src.message.send_message import send_event_message
from src.jobs.notification_jobs import schedule_notifications, remove_scheduled_jobs

logger = logging.getLogger(__name__)

async def handle_edit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    query = update.callback_query
    await query.answer()

    try:
        _, event_id = query.data.split("|")
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if event["creator_id"] != query.from_user.id:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        draft = get_draft_by_event_id(context.bot_data["drafts_db_path"], event_id)
        if draft:
            await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ.", show_alert=True)
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        keyboard = [
            [
                InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc|{event_id}"),
                InlineKeyboardButton("üë• –õ–∏–º–∏—Ç", callback_data=f"edit_limit|{event_id}")
            ],
            [
                InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date|{event_id}"),
                InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_time|{event_id}")
            ],
            [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"event|{event_id}")]
        ]

        await query.edit_message_text(
            "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Edit button error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        action, event_id = query.data.split("|")
        field_map = {
            "edit_date": ("–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)", "date", "AWAIT_DATE"),
            "edit_time": ("–≤—Ä–µ–º—è (–ß–ß:–ú–ú)", "time", "AWAIT_TIME")
        }

        if action not in field_map:
            return

        field_name, field_db, status = field_map[action]

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=status,
            event_id=event_id,
            original_message_id=query.message.message_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        example = "15.07.2025" if action == "edit_date" else "14:30"
        text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name}:\n–ü—Ä–∏–º–µ—Ä: <code>{example}</code>"

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_edit|{draft_id}")
            ]]),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Field selection error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è")


async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        msg_text = update.message.text.strip()
        drafts_db = context.bot_data["drafts_db_path"]
        main_db = context.bot_data["db_path"]

        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft = get_user_draft(drafts_db, user_id)
        if not draft:
            logger.error("No active draft found")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
        if draft["status"] == "AWAIT_DATE":
            try:
                day, month, year = map(int, msg_text.split('.'))
                if not (1 <= day <= 31 and 1 <= month <= 12 and year >= 2023):
                    raise ValueError
                new_value = f"{day:02d}.{month:02d}.{year}"
            except (ValueError, AttributeError):
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07.2025)"
                )
                return

        elif draft["status"] == "AWAIT_TIME":
            try:
                hours, minutes = map(int, msg_text.split(':'))
                if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                    raise ValueError
                new_value = f"{hours:02d}:{minutes:02d}"
            except (ValueError, AttributeError):
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)"
                )
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        field = {"AWAIT_DATE": "date", "AWAIT_TIME": "time"}[draft["status"]]
        if update_event_field(main_db, draft["event_id"], field, new_value):
            try:
                await send_event_message(
                    draft["event_id"],
                    context,
                    draft["chat_id"],
                    draft.get("original_message_id")
                )
                delete_draft(drafts_db, draft["id"])
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                    reply_to_message_id=draft.get("original_message_id")
                )
            except Exception as e:
                logger.error(f"Error updating message: {e}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö† –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )

    except Exception as e:
        logger.error(f"Critical error: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
        )

def register_edit_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(CallbackQueryHandler(
        handle_edit_button,
        pattern=r"^edit\|",
        block=False
    ), group=1)

    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
    application.add_handler(CallbackQueryHandler(
        handle_field_selection,
        pattern=r"^edit_(desc|date|time|limit)\|",
        block=False
    ), group=2)

    # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
        save_edited_field,
        block=False
    ), group=3)