from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler

from config import tz
from src.database.db_operations import get_event, update_event_field
from src.database.db_draft_operations import add_draft, get_draft, update_draft, delete_draft, get_user_draft, \
    get_draft_by_event_id
import logging
from src.message.send_message import send_event_message
from src.jobs.notification_jobs import schedule_notifications, remove_scheduled_jobs

logger = logging.getLogger(__name__)

async def handle_edit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    query = update.callback_query
    await query.answer()

    try:
        _, event_id = query.data.split("|")
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if event["creator_id"] != query.from_user.id:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        draft = get_draft_by_event_id(context.bot_data["drafts_db_path"], event_id)
        if draft:
            await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ.", show_alert=True)
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        keyboard = [
            [
                InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc|{event_id}"),
                InlineKeyboardButton("üë• –õ–∏–º–∏—Ç", callback_data=f"edit_limit|{event_id}")
            ],
            [
                InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date|{event_id}"),
                InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_time|{event_id}")
            ],
            [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"event|{event_id}")]
        ]

        await query.edit_message_text(
            "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Edit button error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        action, event_id = query.data.split("|")
        field_map = {
            "edit_desc": ("–æ–ø–∏—Å–∞–Ω–∏–µ", "description", "AWAIT_DESCRIPTION"),
            "edit_date": ("–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)", "date", "AWAIT_DATE"),
            "edit_time": ("–≤—Ä–µ–º—è (–ß–ß:–ú–ú)", "time", "AWAIT_TIME"),
            "edit_limit": ("–ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "participant_limit", "AWAIT_LIMIT")
        }

        if action not in field_map:
            return

        field_name, field_db, status = field_map[action]

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=status,
            event_id=event_id,
            original_message_id=query.message.message_id
        )

        if not draft_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit|{draft_id}")]]
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Field selection error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è")


async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        msg_id = update.message.message_id
        drafts_db = context.bot_data["drafts_db_path"]
        main_db = context.bot_data["db_path"]

        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        draft = get_user_draft(drafts_db, user_id)
        if not draft:
            logger.error("No active draft found")
            return

        draft = dict(draft)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ get_user_draft –≤–µ—Ä–Ω—É–ª Row

        if not draft.get("event_id"):
            logger.error("Draft missing event_id")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è)
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        field_config = {
            "AWAIT_DESCRIPTION": {"field": "description", "type": str},
            "AWAIT_DATE": {"field": "date", "format": "%d.%m.%Y"},
            "AWAIT_TIME": {"field": "time", "format": "%H:%M"},
            "AWAIT_LIMIT": {"field": "participant_limit", "type": int}
        }.get(draft["status"])

        if not field_config:
            await context.bot.send_message(chat_id, "‚ö† Unknown edit type")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        try:
            new_value = update.message.text.strip()
            if "format" in field_config:
                from datetime import datetime
                datetime.strptime(new_value, field_config["format"])
            elif "type" in field_config:
                new_value = field_config["type"](new_value)
        except ValueError:
            await context.bot.send_message(chat_id, "‚ùå Invalid format")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
        if not update_event_field(main_db, draft["event_id"], field_config["field"], new_value):
            await context.bot.send_message(chat_id, "‚ö† Database update failed")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ)
        try:
            await send_event_message(
                draft["event_id"],
                context,
                draft["chat_id"],
                draft.get("original_message_id")
            )
        except Exception as e:
            logger.error(f"Message update failed: {e}")
            try:
                new_msg = await send_event_message(
                    draft["event_id"],
                    context,
                    draft["chat_id"]
                )
                update_event_field(main_db, draft["event_id"], "message_id", new_msg.message_id)
            except Exception as e:
                logger.error(f"Fallback message creation failed: {e}")

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        delete_draft(drafts_db, draft["id"])

        await context.bot.send_message(
            chat_id,
            "‚úÖ Changes saved",
            reply_to_message_id=draft.get("original_message_id")
        )

    except Exception as e:
        logger.error(f"Critical error: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id,
            "‚ö† An error occurred"
        )

def register_edit_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(CallbackQueryHandler(
        handle_edit_button,
        pattern=r"^edit\|",
        block=False
    ), group=1)

    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
    application.add_handler(CallbackQueryHandler(
        handle_field_selection,
        pattern=r"^edit_(desc|date|time|limit)\|",
        block=False
    ), group=2)

    # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
        save_edited_field,
        block=False
    ), group=3)