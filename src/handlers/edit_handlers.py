from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from src.database.db_operations import get_event, update_event_field
from src.database.db_draft_operations import add_draft
from src.logger import logger
from src.message.send_message import send_event_message


async def handle_edit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    query = update.callback_query
    await query.answer()

    try:
        _, event_id = query.data.split("|")
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if event["creator_id"] != query.from_user.id:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        context.user_data["edit_context"] = {
            "event_id": event_id,
            "chat_id": query.message.chat_id,
            "message_id": query.message.message_id
        }

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        keyboard = [
            [
                InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc|{event_id}"),
                InlineKeyboardButton("üë• –õ–∏–º–∏—Ç", callback_data=f"edit_limit|{event_id}")
            ],
            [
                InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date|{event_id}"),
                InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_time|{event_id}")
            ],
            [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"event|{event_id}")]
        ]

        await query.edit_message_text(
            "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Edit button error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        action, event_id = query.data.split("|")
        field_map = {
            "edit_desc": ("–æ–ø–∏—Å–∞–Ω–∏–µ", "description"),
            "edit_date": ("–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)", "date"),
            "edit_time": ("–≤—Ä–µ–º—è (–ß–ß:–ú–ú)", "time"),
            "edit_limit": ("–ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "participant_limit")
        }

        if action not in field_map:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
        context.user_data["edit_field"] = field_map[action][1]

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=f"EDIT_{field_map[action][1]}",
            event_id=event_id,
            original_message_id=query.message.message_id
        )

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit|{draft_id}")]]
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_map[action][0]}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Field selection error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è")


async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
    try:
        edit_data = context.user_data.get("edit_context")
        if not edit_data or "edit_field" not in context.user_data:
            return

        field = context.user_data["edit_field"]
        new_value = update.message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if field == "date":
            from datetime import datetime
            datetime.strptime(new_value, "%d.%m.%Y")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        success = update_event_field(
            context.bot_data["db_path"],
            edit_data["event_id"],
            field,
            new_value
        )

        if success:
            await update.message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            await send_event_message(
                edit_data["event_id"],
                context,
                edit_data["chat_id"],
                edit_data["message_id"]
            )
        else:
            await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop("edit_context", None)
        context.user_data.pop("edit_field", None)

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Save edit error: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


def register_edit_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    application.add_handler(CallbackQueryHandler(
        handle_edit_button,
        pattern=r"^edit\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
    application.add_handler(CallbackQueryHandler(
        handle_field_selection,
        pattern=r"^edit_(desc|date|time|limit)\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        save_edited_field
    ))