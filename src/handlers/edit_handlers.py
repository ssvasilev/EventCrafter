from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from src.database.db_operations import get_event, update_event_field
from src.database.db_draft_operations import add_draft, get_draft, update_draft, delete_draft, get_user_draft, \
    get_draft_by_event_id
import logging
from src.message.send_message import send_event_message
from src.jobs.notification_jobs import schedule_notifications, remove_scheduled_jobs

logger = logging.getLogger(__name__)

async def handle_edit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    query = update.callback_query
    await query.answer()

    try:
        _, event_id = query.data.split("|")
        db_path = context.bot_data["db_path"]
        event = get_event(db_path, event_id)

        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if event["creator_id"] != query.from_user.id:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        draft = get_draft_by_event_id(context.bot_data["drafts_db_path"], event_id)
        if draft:
            await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ.", show_alert=True)
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        keyboard = [
            [
                InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc|{event_id}"),
                InlineKeyboardButton("üë• –õ–∏–º–∏—Ç", callback_data=f"edit_limit|{event_id}")
            ],
            [
                InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date|{event_id}"),
                InlineKeyboardButton("üïí –í—Ä–µ–º—è", callback_data=f"edit_time|{event_id}")
            ],
            [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"event|{event_id}")]
        ]

        await query.edit_message_text(
            "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Edit button error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        action, event_id = query.data.split("|")
        field_map = {
            "edit_desc": ("–æ–ø–∏—Å–∞–Ω–∏–µ", "description", "EDIT_DESCRIPTION"),
            "edit_date": ("–¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)", "date", "EDIT_DATE"),
            "edit_time": ("–≤—Ä–µ–º—è (–ß–ß:–ú–ú)", "time", "EDIT_TIME"),
            "edit_limit": ("–ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "participant_limit", "EDIT_LIMIT")
        }

        if action not in field_map:
            return

        field_name, field_db, status = field_map[action]

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        draft_id = add_draft(
            db_path=context.bot_data["drafts_db_path"],
            creator_id=query.from_user.id,
            chat_id=query.message.chat_id,
            status=status,
            event_id=event_id,
            original_message_id=query.message.message_id
        )

        if not draft_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit|{draft_id}")]]
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Field selection error: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è")


async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        msg_id = update.message.message_id
        drafts_db = context.bot_data["drafts_db_path"]
        main_db = context.bot_data["db_path"]

        # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        draft = get_user_draft(drafts_db, user_id)
        if not draft or not draft.get("event_id"):
            logger.error(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id {user_id}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="üö´ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            return

        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ ID {draft['id']}, —Å—Ç–∞—Ç—É—Å: {draft['status']}")

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        field_config = {
            "EDIT_DESCRIPTION": {"field": "description", "type": str, "error_msg": "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"},
            "EDIT_DATE": {"field": "date", "format": "%d.%m.%Y", "error_msg": "–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"},
            "EDIT_TIME": {"field": "time", "format": "%H:%M", "error_msg": "–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"},
            "EDIT_LIMIT": {"field": "participant_limit", "type": int, "error_msg": "—á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)"}
        }.get(draft["status"])

        if not field_config:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {draft['status']}")
            await context.bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            new_value = update.message.text.strip()
            if "format" in field_config:
                from datetime import datetime
                datetime.strptime(new_value, field_config["format"])
            elif "type" in field_config:
                new_value = field_config["type"](new_value)
                if field_config["field"] == "participant_limit" and new_value < 0:
                    raise ValueError("–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        except ValueError as e:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ {field_config['error_msg']}"
            )
            return

        # 4. –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è)
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
        if not update_event_field(main_db, draft["event_id"], field_config["field"], new_value):
            logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î")
            await context.bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        logger.info(f"–ü–æ–ª–µ {field_config['field']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î")

        # 6. –î–ª—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if field_config["field"] in ("date", "time"):
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            event = get_event(main_db, draft["event_id"])
            if event:
                remove_scheduled_jobs(context, event["id"])
                schedule_notifications(context, event)

        # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º)
        try:
            await send_event_message(
                draft["event_id"],
                context,
                draft["chat_id"],
                draft["original_message_id"]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                new_msg = await send_event_message(
                    draft["event_id"],
                    context,
                    draft["chat_id"]
                )
                update_event_field(main_db, draft["event_id"], "message_id", new_msg.message_id)
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {new_msg.message_id}")
            except Exception as fallback_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {fallback_e}")

        # 8. –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        delete_draft(drafts_db, draft["id"])

        # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            reply_to_message_id=draft.get("original_message_id")
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ save_edited_field: {str(e)}", exc_info=True)
        try:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"
            )
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")

def register_edit_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    application.add_handler(CallbackQueryHandler(
        handle_edit_button,
        pattern=r"^edit\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
    application.add_handler(CallbackQueryHandler(
        handle_field_selection,
        pattern=r"^edit_(desc|date|time|limit)\|"
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        save_edited_field
    ))